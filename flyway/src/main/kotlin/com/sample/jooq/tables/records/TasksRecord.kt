/*
 * This file is generated by jOOQ.
 */
package com.sample.jooq.tables.records


import com.sample.jooq.tables.Tasks

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TasksRecord() : UpdatableRecordImpl<TasksRecord>(Tasks.TASKS), Record4<UUID?, String?, OffsetDateTime?, OffsetDateTime?> {

    var taskId: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var createdAt: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    var updatedAt: OffsetDateTime?
        set(value): Unit = set(3, value)
        get(): OffsetDateTime? = get(3) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<UUID?, String?, OffsetDateTime?, OffsetDateTime?> = super.fieldsRow() as Row4<UUID?, String?, OffsetDateTime?, OffsetDateTime?>
    override fun valuesRow(): Row4<UUID?, String?, OffsetDateTime?, OffsetDateTime?> = super.valuesRow() as Row4<UUID?, String?, OffsetDateTime?, OffsetDateTime?>
    override fun field1(): Field<UUID?> = Tasks.TASKS.TASK_ID
    override fun field2(): Field<String?> = Tasks.TASKS.NAME
    override fun field3(): Field<OffsetDateTime?> = Tasks.TASKS.CREATED_AT
    override fun field4(): Field<OffsetDateTime?> = Tasks.TASKS.UPDATED_AT
    override fun component1(): UUID? = taskId
    override fun component2(): String? = name
    override fun component3(): OffsetDateTime? = createdAt
    override fun component4(): OffsetDateTime? = updatedAt
    override fun value1(): UUID? = taskId
    override fun value2(): String? = name
    override fun value3(): OffsetDateTime? = createdAt
    override fun value4(): OffsetDateTime? = updatedAt

    override fun value1(value: UUID?): TasksRecord {
        this.taskId = value
        return this
    }

    override fun value2(value: String?): TasksRecord {
        this.name = value
        return this
    }

    override fun value3(value: OffsetDateTime?): TasksRecord {
        this.createdAt = value
        return this
    }

    override fun value4(value: OffsetDateTime?): TasksRecord {
        this.updatedAt = value
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: OffsetDateTime?, value4: OffsetDateTime?): TasksRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised TasksRecord
     */
    constructor(taskId: UUID? = null, name: String? = null, createdAt: OffsetDateTime? = null, updatedAt: OffsetDateTime? = null): this() {
        this.taskId = taskId
        this.name = name
        this.createdAt = createdAt
        this.updatedAt = updatedAt
    }
}
