/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgCursors(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_cursors\" as  SELECT c.name,\n    c.statement,\n    c.is_holdable,\n    c.is_binary,\n    c.is_scrollable,\n    c.creation_time\n   FROM pg_cursor() c(name, statement, is_holdable, is_binary, is_scrollable, creation_time);")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_cursors</code>
         */
        val PG_CURSORS: PgCursors = PgCursors()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_cursors.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_cursors.statement</code>.
     */
    val STATEMENT: TableField<Record, String?> = createField(DSL.name("statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_cursors.is_holdable</code>.
     */
    val IS_HOLDABLE: TableField<Record, Boolean?> = createField(DSL.name("is_holdable"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_cursors.is_binary</code>.
     */
    val IS_BINARY: TableField<Record, Boolean?> = createField(DSL.name("is_binary"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_cursors.is_scrollable</code>.
     */
    val IS_SCROLLABLE: TableField<Record, Boolean?> = createField(DSL.name("is_scrollable"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_cursors.creation_time</code>.
     */
    val CREATION_TIME: TableField<Record, OffsetDateTime?> = createField(DSL.name("creation_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_cursors</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_cursors</code> table reference
     */
    constructor(): this(DSL.name("pg_cursors"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_CURSORS, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgCursors = PgCursors(DSL.name(alias), this)
    override fun `as`(alias: Name): PgCursors = PgCursors(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgCursors = PgCursors(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgCursors = PgCursors(name, null)
}
