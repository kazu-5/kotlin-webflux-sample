/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_TYPE_OID_INDEX
import com.sample.pg_catalog.indexes.PG_TYPE_TYPNAME_NSP_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_type</code>
         */
        val PG_TYPE: PgType = PgType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_type.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typname</code>.
     */
    val TYPNAME: TableField<Record, String?> = createField(DSL.name("typname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typnamespace</code>.
     */
    val TYPNAMESPACE: TableField<Record, Long?> = createField(DSL.name("typnamespace"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typowner</code>.
     */
    val TYPOWNER: TableField<Record, Long?> = createField(DSL.name("typowner"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typlen</code>.
     */
    val TYPLEN: TableField<Record, Short?> = createField(DSL.name("typlen"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typbyval</code>.
     */
    val TYPBYVAL: TableField<Record, Boolean?> = createField(DSL.name("typbyval"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typtype</code>.
     */
    val TYPTYPE: TableField<Record, String?> = createField(DSL.name("typtype"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typcategory</code>.
     */
    val TYPCATEGORY: TableField<Record, String?> = createField(DSL.name("typcategory"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typispreferred</code>.
     */
    val TYPISPREFERRED: TableField<Record, Boolean?> = createField(DSL.name("typispreferred"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typisdefined</code>.
     */
    val TYPISDEFINED: TableField<Record, Boolean?> = createField(DSL.name("typisdefined"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typdelim</code>.
     */
    val TYPDELIM: TableField<Record, String?> = createField(DSL.name("typdelim"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typrelid</code>.
     */
    val TYPRELID: TableField<Record, Long?> = createField(DSL.name("typrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typelem</code>.
     */
    val TYPELEM: TableField<Record, Long?> = createField(DSL.name("typelem"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typarray</code>.
     */
    val TYPARRAY: TableField<Record, Long?> = createField(DSL.name("typarray"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typinput</code>.
     */
    val TYPINPUT: TableField<Record, String?> = createField(DSL.name("typinput"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typoutput</code>.
     */
    val TYPOUTPUT: TableField<Record, String?> = createField(DSL.name("typoutput"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typreceive</code>.
     */
    val TYPRECEIVE: TableField<Record, String?> = createField(DSL.name("typreceive"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typsend</code>.
     */
    val TYPSEND: TableField<Record, String?> = createField(DSL.name("typsend"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typmodin</code>.
     */
    val TYPMODIN: TableField<Record, String?> = createField(DSL.name("typmodin"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typmodout</code>.
     */
    val TYPMODOUT: TableField<Record, String?> = createField(DSL.name("typmodout"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typanalyze</code>.
     */
    val TYPANALYZE: TableField<Record, String?> = createField(DSL.name("typanalyze"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typalign</code>.
     */
    val TYPALIGN: TableField<Record, String?> = createField(DSL.name("typalign"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typstorage</code>.
     */
    val TYPSTORAGE: TableField<Record, String?> = createField(DSL.name("typstorage"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typnotnull</code>.
     */
    val TYPNOTNULL: TableField<Record, Boolean?> = createField(DSL.name("typnotnull"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typbasetype</code>.
     */
    val TYPBASETYPE: TableField<Record, Long?> = createField(DSL.name("typbasetype"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typtypmod</code>.
     */
    val TYPTYPMOD: TableField<Record, Int?> = createField(DSL.name("typtypmod"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typndims</code>.
     */
    val TYPNDIMS: TableField<Record, Int?> = createField(DSL.name("typndims"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typcollation</code>.
     */
    val TYPCOLLATION: TableField<Record, Long?> = createField(DSL.name("typcollation"), SQLDataType.BIGINT.nullable(false), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val TYPDEFAULTBIN: TableField<Record, Any?> = createField(DSL.name("typdefaultbin"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "")

    /**
     * The column <code>pg_catalog.pg_type.typdefault</code>.
     */
    val TYPDEFAULT: TableField<Record, String?> = createField(DSL.name("typdefault"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_type.typacl</code>.
     */
    val TYPACL: TableField<Record, Array<String?>?> = createField(DSL.name("typacl"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_type</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_type</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_type</code> table reference
     */
    constructor(): this(DSL.name("pg_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_TYPE, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_TYPE_OID_INDEX, PG_TYPE_TYPNAME_NSP_INDEX)
    override fun `as`(alias: String): PgType = PgType(DSL.name(alias), this)
    override fun `as`(alias: Name): PgType = PgType(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgType = PgType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgType = PgType(name, null)
}
