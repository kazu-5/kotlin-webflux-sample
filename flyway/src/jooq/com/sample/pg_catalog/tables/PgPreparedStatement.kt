/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgPreparedStatement(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_prepared_statement</code>
         */
        val PG_PREPARED_STATEMENT: PgPreparedStatement = PgPreparedStatement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_prepared_statement.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_prepared_statement.statement</code>.
     */
    val STATEMENT: TableField<Record, String?> = createField(DSL.name("statement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_prepared_statement.prepare_time</code>.
     */
    val PREPARE_TIME: TableField<Record, OffsetDateTime?> = createField(DSL.name("prepare_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_prepared_statement.parameter_types</code>.
     */
    val PARAMETER_TYPES: TableField<Record, Array<Any?>?> = createField(DSL.name("parameter_types"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regtype\"").getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_prepared_statement.from_sql</code>.
     */
    val FROM_SQL: TableField<Record, Boolean?> = createField(DSL.name("from_sql"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, arrayOf(
    ))
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_statement</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_statement</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_prepared_statement</code> table reference
     */
    constructor(): this(DSL.name("pg_prepared_statement"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgPreparedStatement = PgPreparedStatement(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgPreparedStatement = PgPreparedStatement(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgPreparedStatement = PgPreparedStatement(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgPreparedStatement = PgPreparedStatement(name, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgPreparedStatement = PgPreparedStatement(DSL.name("pg_prepared_statement"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
