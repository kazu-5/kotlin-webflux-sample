/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgRoles(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_roles\" as  SELECT pg_authid.rolname,\n    pg_authid.rolsuper,\n    pg_authid.rolinherit,\n    pg_authid.rolcreaterole,\n    pg_authid.rolcreatedb,\n    pg_authid.rolcanlogin,\n    pg_authid.rolreplication,\n    pg_authid.rolconnlimit,\n    '********'::text AS rolpassword,\n    pg_authid.rolvaliduntil,\n    pg_authid.rolbypassrls,\n    s.setconfig AS rolconfig,\n    pg_authid.oid\n   FROM (pg_authid\n     LEFT JOIN pg_db_role_setting s ON (((pg_authid.oid = s.setrole) AND (s.setdatabase = (0)::oid))));")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_roles</code>
         */
        val PG_ROLES: PgRoles = PgRoles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_roles.rolname</code>.
     */
    val ROLNAME: TableField<Record, String?> = createField(DSL.name("rolname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolsuper</code>.
     */
    val ROLSUPER: TableField<Record, Boolean?> = createField(DSL.name("rolsuper"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolinherit</code>.
     */
    val ROLINHERIT: TableField<Record, Boolean?> = createField(DSL.name("rolinherit"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolcreaterole</code>.
     */
    val ROLCREATEROLE: TableField<Record, Boolean?> = createField(DSL.name("rolcreaterole"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolcreatedb</code>.
     */
    val ROLCREATEDB: TableField<Record, Boolean?> = createField(DSL.name("rolcreatedb"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolcanlogin</code>.
     */
    val ROLCANLOGIN: TableField<Record, Boolean?> = createField(DSL.name("rolcanlogin"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolreplication</code>.
     */
    val ROLREPLICATION: TableField<Record, Boolean?> = createField(DSL.name("rolreplication"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolconnlimit</code>.
     */
    val ROLCONNLIMIT: TableField<Record, Int?> = createField(DSL.name("rolconnlimit"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolpassword</code>.
     */
    val ROLPASSWORD: TableField<Record, String?> = createField(DSL.name("rolpassword"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolvaliduntil</code>.
     */
    val ROLVALIDUNTIL: TableField<Record, OffsetDateTime?> = createField(DSL.name("rolvaliduntil"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolbypassrls</code>.
     */
    val ROLBYPASSRLS: TableField<Record, Boolean?> = createField(DSL.name("rolbypassrls"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_roles.rolconfig</code>.
     */
    val ROLCONFIG: TableField<Record, Array<String?>?> = createField(DSL.name("rolconfig"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_roles.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_roles</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_roles</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_roles</code> table reference
     */
    constructor(): this(DSL.name("pg_roles"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_ROLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgRoles = PgRoles(DSL.name(alias), this)
    override fun `as`(alias: Name): PgRoles = PgRoles(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgRoles = PgRoles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgRoles = PgRoles(name, null)
}
