/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatProgressBasebackup(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stat_progress_basebackup\" as  SELECT s.pid,\n        CASE s.param1\n            WHEN 0 THEN 'initializing'::text\n            WHEN 1 THEN 'waiting for checkpoint to finish'::text\n            WHEN 2 THEN 'estimating backup size'::text\n            WHEN 3 THEN 'streaming database files'::text\n            WHEN 4 THEN 'waiting for wal archiving to finish'::text\n            WHEN 5 THEN 'transferring wal files'::text\n            ELSE NULL::text\n        END AS phase,\n        CASE s.param2\n            WHEN '-1'::integer THEN NULL::bigint\n            ELSE s.param2\n        END AS backup_total,\n    s.param3 AS backup_streamed,\n    s.param4 AS tablespaces_total,\n    s.param5 AS tablespaces_streamed\n   FROM pg_stat_get_progress_info('BASEBACKUP'::text) s(pid, datid, relid, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15, param16, param17, param18, param19, param20);")
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_progress_basebackup</code>
         */
        val PG_STAT_PROGRESS_BASEBACKUP: PgStatProgressBasebackup = PgStatProgressBasebackup()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_progress_basebackup.pid</code>.
     */
    val PID: TableField<Record, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_progress_basebackup.phase</code>.
     */
    val PHASE: TableField<Record, String?> = createField(DSL.name("phase"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.backup_total</code>.
     */
    val BACKUP_TOTAL: TableField<Record, Long?> = createField(DSL.name("backup_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.backup_streamed</code>.
     */
    val BACKUP_STREAMED: TableField<Record, Long?> = createField(DSL.name("backup_streamed"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.tablespaces_total</code>.
     */
    val TABLESPACES_TOTAL: TableField<Record, Long?> = createField(DSL.name("tablespaces_total"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_progress_basebackup.tablespaces_streamed</code>.
     */
    val TABLESPACES_STREAMED: TableField<Record, Long?> = createField(DSL.name("tablespaces_streamed"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_basebackup</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_progress_basebackup</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_progress_basebackup</code> table
     * reference
     */
    constructor(): this(DSL.name("pg_stat_progress_basebackup"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_PROGRESS_BASEBACKUP, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatProgressBasebackup = PgStatProgressBasebackup(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatProgressBasebackup = PgStatProgressBasebackup(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatProgressBasebackup = PgStatProgressBasebackup(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatProgressBasebackup = PgStatProgressBasebackup(name, null)
}
