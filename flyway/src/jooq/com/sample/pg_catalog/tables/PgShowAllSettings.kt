/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgShowAllSettings(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_show_all_settings</code>
         */
        val PG_SHOW_ALL_SETTINGS: PgShowAllSettings = PgShowAllSettings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_show_all_settings.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.setting</code>.
     */
    val SETTING: TableField<Record, String?> = createField(DSL.name("setting"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.unit</code>.
     */
    val UNIT: TableField<Record, String?> = createField(DSL.name("unit"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.category</code>.
     */
    val CATEGORY: TableField<Record, String?> = createField(DSL.name("category"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.short_desc</code>.
     */
    val SHORT_DESC: TableField<Record, String?> = createField(DSL.name("short_desc"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.extra_desc</code>.
     */
    val EXTRA_DESC: TableField<Record, String?> = createField(DSL.name("extra_desc"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.context</code>.
     */
    val CONTEXT: TableField<Record, String?> = createField(DSL.name("context"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.vartype</code>.
     */
    val VARTYPE: TableField<Record, String?> = createField(DSL.name("vartype"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.source</code>.
     */
    val SOURCE: TableField<Record, String?> = createField(DSL.name("source"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.min_val</code>.
     */
    val MIN_VAL: TableField<Record, String?> = createField(DSL.name("min_val"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.max_val</code>.
     */
    val MAX_VAL: TableField<Record, String?> = createField(DSL.name("max_val"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.enumvals</code>.
     */
    val ENUMVALS: TableField<Record, Array<String?>?> = createField(DSL.name("enumvals"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.boot_val</code>.
     */
    val BOOT_VAL: TableField<Record, String?> = createField(DSL.name("boot_val"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.reset_val</code>.
     */
    val RESET_VAL: TableField<Record, String?> = createField(DSL.name("reset_val"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.sourcefile</code>.
     */
    val SOURCEFILE: TableField<Record, String?> = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.sourceline</code>.
     */
    val SOURCELINE: TableField<Record, Int?> = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_show_all_settings.pending_restart</code>.
     */
    val PENDING_RESTART: TableField<Record, Boolean?> = createField(DSL.name("pending_restart"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, arrayOf(
    ))
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_settings</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_show_all_settings</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_show_all_settings</code> table reference
     */
    constructor(): this(DSL.name("pg_show_all_settings"), null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgShowAllSettings = PgShowAllSettings(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PgShowAllSettings = PgShowAllSettings(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgShowAllSettings = PgShowAllSettings(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgShowAllSettings = PgShowAllSettings(name, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(): PgShowAllSettings = PgShowAllSettings(DSL.name("pg_show_all_settings"), null, arrayOf()).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
