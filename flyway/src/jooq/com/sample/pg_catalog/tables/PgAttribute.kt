/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_ATTRIBUTE_RELID_ATTNAM_INDEX
import com.sample.pg_catalog.indexes.PG_ATTRIBUTE_RELID_ATTNUM_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgAttribute(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_attribute</code>
         */
        val PG_ATTRIBUTE: PgAttribute = PgAttribute()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_attribute.attrelid</code>.
     */
    val ATTRELID: TableField<Record, Long?> = createField(DSL.name("attrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attname</code>.
     */
    val ATTNAME: TableField<Record, String?> = createField(DSL.name("attname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.atttypid</code>.
     */
    val ATTTYPID: TableField<Record, Long?> = createField(DSL.name("atttypid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attstattarget</code>.
     */
    val ATTSTATTARGET: TableField<Record, Int?> = createField(DSL.name("attstattarget"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attlen</code>.
     */
    val ATTLEN: TableField<Record, Short?> = createField(DSL.name("attlen"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attnum</code>.
     */
    val ATTNUM: TableField<Record, Short?> = createField(DSL.name("attnum"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attndims</code>.
     */
    val ATTNDIMS: TableField<Record, Int?> = createField(DSL.name("attndims"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attcacheoff</code>.
     */
    val ATTCACHEOFF: TableField<Record, Int?> = createField(DSL.name("attcacheoff"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.atttypmod</code>.
     */
    val ATTTYPMOD: TableField<Record, Int?> = createField(DSL.name("atttypmod"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attbyval</code>.
     */
    val ATTBYVAL: TableField<Record, Boolean?> = createField(DSL.name("attbyval"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attstorage</code>.
     */
    val ATTSTORAGE: TableField<Record, String?> = createField(DSL.name("attstorage"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attalign</code>.
     */
    val ATTALIGN: TableField<Record, String?> = createField(DSL.name("attalign"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attnotnull</code>.
     */
    val ATTNOTNULL: TableField<Record, Boolean?> = createField(DSL.name("attnotnull"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.atthasdef</code>.
     */
    val ATTHASDEF: TableField<Record, Boolean?> = createField(DSL.name("atthasdef"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.atthasmissing</code>.
     */
    val ATTHASMISSING: TableField<Record, Boolean?> = createField(DSL.name("atthasmissing"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attidentity</code>.
     */
    val ATTIDENTITY: TableField<Record, String?> = createField(DSL.name("attidentity"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attgenerated</code>.
     */
    val ATTGENERATED: TableField<Record, String?> = createField(DSL.name("attgenerated"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attisdropped</code>.
     */
    val ATTISDROPPED: TableField<Record, Boolean?> = createField(DSL.name("attisdropped"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attislocal</code>.
     */
    val ATTISLOCAL: TableField<Record, Boolean?> = createField(DSL.name("attislocal"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attinhcount</code>.
     */
    val ATTINHCOUNT: TableField<Record, Int?> = createField(DSL.name("attinhcount"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attcollation</code>.
     */
    val ATTCOLLATION: TableField<Record, Long?> = createField(DSL.name("attcollation"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attacl</code>.
     */
    val ATTACL: TableField<Record, Array<String?>?> = createField(DSL.name("attacl"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attoptions</code>.
     */
    val ATTOPTIONS: TableField<Record, Array<String?>?> = createField(DSL.name("attoptions"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attfdwoptions</code>.
     */
    val ATTFDWOPTIONS: TableField<Record, Array<String?>?> = createField(DSL.name("attfdwoptions"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_attribute.attmissingval</code>.
     */
    val ATTMISSINGVAL: TableField<Record, Array<Any?>?> = createField(DSL.name("attmissingval"), SQLDataType.OTHER.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_attribute</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_attribute</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_attribute</code> table reference
     */
    constructor(): this(DSL.name("pg_attribute"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_ATTRIBUTE, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_ATTRIBUTE_RELID_ATTNAM_INDEX, PG_ATTRIBUTE_RELID_ATTNUM_INDEX)
    override fun `as`(alias: String): PgAttribute = PgAttribute(DSL.name(alias), this)
    override fun `as`(alias: Name): PgAttribute = PgAttribute(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgAttribute = PgAttribute(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgAttribute = PgAttribute(name, null)
}
