/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_INDEX_INDEXRELID_INDEX
import com.sample.pg_catalog.indexes.PG_INDEX_INDRELID_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgIndex(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_index</code>
         */
        val PG_INDEX: PgIndex = PgIndex()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_index.indexrelid</code>.
     */
    val INDEXRELID: TableField<Record, Long?> = createField(DSL.name("indexrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indrelid</code>.
     */
    val INDRELID: TableField<Record, Long?> = createField(DSL.name("indrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indnatts</code>.
     */
    val INDNATTS: TableField<Record, Short?> = createField(DSL.name("indnatts"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indnkeyatts</code>.
     */
    val INDNKEYATTS: TableField<Record, Short?> = createField(DSL.name("indnkeyatts"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisunique</code>.
     */
    val INDISUNIQUE: TableField<Record, Boolean?> = createField(DSL.name("indisunique"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisprimary</code>.
     */
    val INDISPRIMARY: TableField<Record, Boolean?> = createField(DSL.name("indisprimary"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisexclusion</code>.
     */
    val INDISEXCLUSION: TableField<Record, Boolean?> = createField(DSL.name("indisexclusion"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indimmediate</code>.
     */
    val INDIMMEDIATE: TableField<Record, Boolean?> = createField(DSL.name("indimmediate"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisclustered</code>.
     */
    val INDISCLUSTERED: TableField<Record, Boolean?> = createField(DSL.name("indisclustered"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisvalid</code>.
     */
    val INDISVALID: TableField<Record, Boolean?> = createField(DSL.name("indisvalid"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indcheckxmin</code>.
     */
    val INDCHECKXMIN: TableField<Record, Boolean?> = createField(DSL.name("indcheckxmin"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisready</code>.
     */
    val INDISREADY: TableField<Record, Boolean?> = createField(DSL.name("indisready"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indislive</code>.
     */
    val INDISLIVE: TableField<Record, Boolean?> = createField(DSL.name("indislive"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indisreplident</code>.
     */
    val INDISREPLIDENT: TableField<Record, Boolean?> = createField(DSL.name("indisreplident"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indkey</code>.
     */
    val INDKEY: TableField<Record, Array<Any?>?> = createField(DSL.name("indkey"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"int2vector\"").getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indcollation</code>.
     */
    val INDCOLLATION: TableField<Record, Array<Long?>?> = createField(DSL.name("indcollation"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indclass</code>.
     */
    val INDCLASS: TableField<Record, Array<Long?>?> = createField(DSL.name("indclass"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_index.indoption</code>.
     */
    val INDOPTION: TableField<Record, Array<Any?>?> = createField(DSL.name("indoption"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"int2vector\"").getArrayDataType(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val INDEXPRS: TableField<Record, Any?> = createField(DSL.name("indexprs"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val INDPRED: TableField<Record, Any?> = createField(DSL.name("indpred"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_index</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_index</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_index</code> table reference
     */
    constructor(): this(DSL.name("pg_index"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_INDEX, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_INDEX_INDEXRELID_INDEX, PG_INDEX_INDRELID_INDEX)
    override fun `as`(alias: String): PgIndex = PgIndex(DSL.name(alias), this)
    override fun `as`(alias: Name): PgIndex = PgIndex(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgIndex = PgIndex(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgIndex = PgIndex(name, null)
}
