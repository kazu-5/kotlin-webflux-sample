/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGssapi(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stat_gssapi\" as  SELECT s.pid,\n    s.gss_auth AS gss_authenticated,\n    s.gss_princ AS principal,\n    s.gss_enc AS encrypted\n   FROM pg_stat_get_activity(NULL::integer) s(datid, pid, usesysid, application_name, state, query, wait_event_type, wait_event, xact_start, query_start, backend_start, state_change, client_addr, client_hostname, client_port, backend_xid, backend_xmin, backend_type, ssl, sslversion, sslcipher, sslbits, sslcompression, ssl_client_dn, ssl_client_serial, ssl_issuer_dn, gss_auth, gss_princ, gss_enc, leader_pid)\n  WHERE (s.client_port IS NOT NULL);")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stat_gssapi</code>
         */
        val PG_STAT_GSSAPI: PgStatGssapi = PgStatGssapi()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_gssapi.pid</code>.
     */
    val PID: TableField<Record, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_gssapi.gss_authenticated</code>.
     */
    val GSS_AUTHENTICATED: TableField<Record, Boolean?> = createField(DSL.name("gss_authenticated"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_gssapi.principal</code>.
     */
    val PRINCIPAL: TableField<Record, String?> = createField(DSL.name("principal"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_gssapi.encrypted</code>.
     */
    val ENCRYPTED: TableField<Record, Boolean?> = createField(DSL.name("encrypted"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_gssapi</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_gssapi</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_gssapi</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_gssapi"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_GSSAPI, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatGssapi = PgStatGssapi(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatGssapi = PgStatGssapi(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatGssapi = PgStatGssapi(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatGssapi = PgStatGssapi(name, null)
}
