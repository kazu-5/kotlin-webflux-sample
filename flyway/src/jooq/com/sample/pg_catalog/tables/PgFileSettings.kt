/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgFileSettings(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_file_settings\" as  SELECT a.sourcefile,\n    a.sourceline,\n    a.seqno,\n    a.name,\n    a.setting,\n    a.applied,\n    a.error\n   FROM pg_show_all_file_settings() a(sourcefile, sourceline, seqno, name, setting, applied, error);")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_file_settings</code>
         */
        val PG_FILE_SETTINGS: PgFileSettings = PgFileSettings()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_file_settings.sourcefile</code>.
     */
    val SOURCEFILE: TableField<Record, String?> = createField(DSL.name("sourcefile"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.sourceline</code>.
     */
    val SOURCELINE: TableField<Record, Int?> = createField(DSL.name("sourceline"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.seqno</code>.
     */
    val SEQNO: TableField<Record, Int?> = createField(DSL.name("seqno"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.setting</code>.
     */
    val SETTING: TableField<Record, String?> = createField(DSL.name("setting"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.applied</code>.
     */
    val APPLIED: TableField<Record, Boolean?> = createField(DSL.name("applied"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_file_settings.error</code>.
     */
    val ERROR: TableField<Record, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_file_settings</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_file_settings</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_file_settings</code> table reference
     */
    constructor(): this(DSL.name("pg_file_settings"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_FILE_SETTINGS, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgFileSettings = PgFileSettings(DSL.name(alias), this)
    override fun `as`(alias: Name): PgFileSettings = PgFileSettings(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgFileSettings = PgFileSettings(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgFileSettings = PgFileSettings(name, null)
}
