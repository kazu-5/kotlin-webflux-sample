/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgHbaFileRules(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_hba_file_rules\" as  SELECT a.line_number,\n    a.type,\n    a.database,\n    a.user_name,\n    a.address,\n    a.netmask,\n    a.auth_method,\n    a.options,\n    a.error\n   FROM pg_hba_file_rules() a(line_number, type, database, user_name, address, netmask, auth_method, options, error);")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_hba_file_rules</code>
         */
        val PG_HBA_FILE_RULES: PgHbaFileRules = PgHbaFileRules()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.line_number</code>.
     */
    val LINE_NUMBER: TableField<Record, Int?> = createField(DSL.name("line_number"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.type</code>.
     */
    val TYPE: TableField<Record, String?> = createField(DSL.name("type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.database</code>.
     */
    val DATABASE: TableField<Record, Array<String?>?> = createField(DSL.name("database"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.user_name</code>.
     */
    val USER_NAME: TableField<Record, Array<String?>?> = createField(DSL.name("user_name"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.address</code>.
     */
    val ADDRESS: TableField<Record, String?> = createField(DSL.name("address"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.netmask</code>.
     */
    val NETMASK: TableField<Record, String?> = createField(DSL.name("netmask"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.auth_method</code>.
     */
    val AUTH_METHOD: TableField<Record, String?> = createField(DSL.name("auth_method"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.options</code>.
     */
    val OPTIONS: TableField<Record, Array<String?>?> = createField(DSL.name("options"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_hba_file_rules.error</code>.
     */
    val ERROR: TableField<Record, String?> = createField(DSL.name("error"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_hba_file_rules</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_hba_file_rules</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_hba_file_rules</code> table reference
     */
    constructor(): this(DSL.name("pg_hba_file_rules"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_HBA_FILE_RULES, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgHbaFileRules = PgHbaFileRules(DSL.name(alias), this)
    override fun `as`(alias: Name): PgHbaFileRules = PgHbaFileRules(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgHbaFileRules = PgHbaFileRules(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgHbaFileRules = PgHbaFileRules(name, null)
}
