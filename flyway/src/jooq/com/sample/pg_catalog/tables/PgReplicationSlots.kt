/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgReplicationSlots(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_replication_slots\" as  SELECT l.slot_name,\n    l.plugin,\n    l.slot_type,\n    l.datoid,\n    d.datname AS database,\n    l.temporary,\n    l.active,\n    l.active_pid,\n    l.xmin,\n    l.catalog_xmin,\n    l.restart_lsn,\n    l.confirmed_flush_lsn,\n    l.wal_status,\n    l.safe_wal_size\n   FROM (pg_get_replication_slots() l(slot_name, plugin, slot_type, datoid, temporary, active, active_pid, xmin, catalog_xmin, restart_lsn, confirmed_flush_lsn, wal_status, safe_wal_size)\n     LEFT JOIN pg_database d ON ((l.datoid = d.oid)));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_replication_slots</code>
         */
        val PG_REPLICATION_SLOTS: PgReplicationSlots = PgReplicationSlots()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_replication_slots.slot_name</code>.
     */
    val SLOT_NAME: TableField<Record, String?> = createField(DSL.name("slot_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.plugin</code>.
     */
    val PLUGIN: TableField<Record, String?> = createField(DSL.name("plugin"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.slot_type</code>.
     */
    val SLOT_TYPE: TableField<Record, String?> = createField(DSL.name("slot_type"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.datoid</code>.
     */
    val DATOID: TableField<Record, Long?> = createField(DSL.name("datoid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.database</code>.
     */
    val DATABASE: TableField<Record, String?> = createField(DSL.name("database"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.temporary</code>.
     */
    val TEMPORARY: TableField<Record, Boolean?> = createField(DSL.name("temporary"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.active</code>.
     */
    val ACTIVE: TableField<Record, Boolean?> = createField(DSL.name("active"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.active_pid</code>.
     */
    val ACTIVE_PID: TableField<Record, Int?> = createField(DSL.name("active_pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.xmin</code>.
     */
    val XMIN: TableField<Record, Long?> = createField(DSL.name("xmin"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.catalog_xmin</code>.
     */
    val CATALOG_XMIN: TableField<Record, Long?> = createField(DSL.name("catalog_xmin"), SQLDataType.BIGINT, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val RESTART_LSN: TableField<Record, Any?> = createField(DSL.name("restart_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val CONFIRMED_FLUSH_LSN: TableField<Record, Any?> = createField(DSL.name("confirmed_flush_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.wal_status</code>.
     */
    val WAL_STATUS: TableField<Record, String?> = createField(DSL.name("wal_status"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_replication_slots.safe_wal_size</code>.
     */
    val SAFE_WAL_SIZE: TableField<Record, Long?> = createField(DSL.name("safe_wal_size"), SQLDataType.BIGINT, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_replication_slots</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_replication_slots</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_replication_slots</code> table reference
     */
    constructor(): this(DSL.name("pg_replication_slots"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_REPLICATION_SLOTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgReplicationSlots = PgReplicationSlots(DSL.name(alias), this)
    override fun `as`(alias: Name): PgReplicationSlots = PgReplicationSlots(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgReplicationSlots = PgReplicationSlots(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgReplicationSlots = PgReplicationSlots(name, null)
}
