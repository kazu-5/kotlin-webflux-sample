/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatDatabase(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stat_database\" as  SELECT d.oid AS datid,\n    d.datname,\n        CASE\n            WHEN (d.oid = (0)::oid) THEN 0\n            ELSE pg_stat_get_db_numbackends(d.oid)\n        END AS numbackends,\n    pg_stat_get_db_xact_commit(d.oid) AS xact_commit,\n    pg_stat_get_db_xact_rollback(d.oid) AS xact_rollback,\n    (pg_stat_get_db_blocks_fetched(d.oid) - pg_stat_get_db_blocks_hit(d.oid)) AS blks_read,\n    pg_stat_get_db_blocks_hit(d.oid) AS blks_hit,\n    pg_stat_get_db_tuples_returned(d.oid) AS tup_returned,\n    pg_stat_get_db_tuples_fetched(d.oid) AS tup_fetched,\n    pg_stat_get_db_tuples_inserted(d.oid) AS tup_inserted,\n    pg_stat_get_db_tuples_updated(d.oid) AS tup_updated,\n    pg_stat_get_db_tuples_deleted(d.oid) AS tup_deleted,\n    pg_stat_get_db_conflict_all(d.oid) AS conflicts,\n    pg_stat_get_db_temp_files(d.oid) AS temp_files,\n    pg_stat_get_db_temp_bytes(d.oid) AS temp_bytes,\n    pg_stat_get_db_deadlocks(d.oid) AS deadlocks,\n    pg_stat_get_db_checksum_failures(d.oid) AS checksum_failures,\n    pg_stat_get_db_checksum_last_failure(d.oid) AS checksum_last_failure,\n    pg_stat_get_db_blk_read_time(d.oid) AS blk_read_time,\n    pg_stat_get_db_blk_write_time(d.oid) AS blk_write_time,\n    pg_stat_get_db_stat_reset_time(d.oid) AS stats_reset\n   FROM ( SELECT 0 AS oid,\n            NULL::name AS datname\n        UNION ALL\n         SELECT pg_database.oid,\n            pg_database.datname\n           FROM pg_database) d;")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stat_database</code>
         */
        val PG_STAT_DATABASE: PgStatDatabase = PgStatDatabase()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_database.datid</code>.
     */
    val DATID: TableField<Record, Long?> = createField(DSL.name("datid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.datname</code>.
     */
    val DATNAME: TableField<Record, String?> = createField(DSL.name("datname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.numbackends</code>.
     */
    val NUMBACKENDS: TableField<Record, Int?> = createField(DSL.name("numbackends"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_commit</code>.
     */
    val XACT_COMMIT: TableField<Record, Long?> = createField(DSL.name("xact_commit"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.xact_rollback</code>.
     */
    val XACT_ROLLBACK: TableField<Record, Long?> = createField(DSL.name("xact_rollback"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_read</code>.
     */
    val BLKS_READ: TableField<Record, Long?> = createField(DSL.name("blks_read"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blks_hit</code>.
     */
    val BLKS_HIT: TableField<Record, Long?> = createField(DSL.name("blks_hit"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_returned</code>.
     */
    val TUP_RETURNED: TableField<Record, Long?> = createField(DSL.name("tup_returned"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_fetched</code>.
     */
    val TUP_FETCHED: TableField<Record, Long?> = createField(DSL.name("tup_fetched"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_inserted</code>.
     */
    val TUP_INSERTED: TableField<Record, Long?> = createField(DSL.name("tup_inserted"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_updated</code>.
     */
    val TUP_UPDATED: TableField<Record, Long?> = createField(DSL.name("tup_updated"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.tup_deleted</code>.
     */
    val TUP_DELETED: TableField<Record, Long?> = createField(DSL.name("tup_deleted"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.conflicts</code>.
     */
    val CONFLICTS: TableField<Record, Long?> = createField(DSL.name("conflicts"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_files</code>.
     */
    val TEMP_FILES: TableField<Record, Long?> = createField(DSL.name("temp_files"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.temp_bytes</code>.
     */
    val TEMP_BYTES: TableField<Record, Long?> = createField(DSL.name("temp_bytes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.deadlocks</code>.
     */
    val DEADLOCKS: TableField<Record, Long?> = createField(DSL.name("deadlocks"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.checksum_failures</code>.
     */
    val CHECKSUM_FAILURES: TableField<Record, Long?> = createField(DSL.name("checksum_failures"), SQLDataType.BIGINT, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_database.checksum_last_failure</code>.
     */
    val CHECKSUM_LAST_FAILURE: TableField<Record, OffsetDateTime?> = createField(DSL.name("checksum_last_failure"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_read_time</code>.
     */
    val BLK_READ_TIME: TableField<Record, Double?> = createField(DSL.name("blk_read_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.blk_write_time</code>.
     */
    val BLK_WRITE_TIME: TableField<Record, Double?> = createField(DSL.name("blk_write_time"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_database.stats_reset</code>.
     */
    val STATS_RESET: TableField<Record, OffsetDateTime?> = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_database</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_database</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_database"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_DATABASE, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatDatabase = PgStatDatabase(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatDatabase = PgStatDatabase(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatDatabase = PgStatDatabase(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatDatabase = PgStatDatabase(name, null)
}
