/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatsExt(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stats_ext\" as  SELECT cn.nspname AS schemaname,\n    c.relname AS tablename,\n    sn.nspname AS statistics_schemaname,\n    s.stxname AS statistics_name,\n    pg_get_userbyid(s.stxowner) AS statistics_owner,\n    ( SELECT array_agg(a.attname ORDER BY a.attnum) AS array_agg\n           FROM (unnest(s.stxkeys) k(k)\n             JOIN pg_attribute a ON (((a.attrelid = s.stxrelid) AND (a.attnum = k.k))))) AS attnames,\n    s.stxkind AS kinds,\n    sd.stxdndistinct AS n_distinct,\n    sd.stxddependencies AS dependencies,\n    m.most_common_vals,\n    m.most_common_val_nulls,\n    m.most_common_freqs,\n    m.most_common_base_freqs\n   FROM (((((pg_statistic_ext s\n     JOIN pg_class c ON ((c.oid = s.stxrelid)))\n     JOIN pg_statistic_ext_data sd ON ((s.oid = sd.stxoid)))\n     LEFT JOIN pg_namespace cn ON ((cn.oid = c.relnamespace)))\n     LEFT JOIN pg_namespace sn ON ((sn.oid = s.stxnamespace)))\n     LEFT JOIN LATERAL ( SELECT array_agg(pg_mcv_list_items.\"values\") AS most_common_vals,\n            array_agg(pg_mcv_list_items.nulls) AS most_common_val_nulls,\n            array_agg(pg_mcv_list_items.frequency) AS most_common_freqs,\n            array_agg(pg_mcv_list_items.base_frequency) AS most_common_base_freqs\n           FROM pg_mcv_list_items(sd.stxdmcv) pg_mcv_list_items(index, \"values\", nulls, frequency, base_frequency)) m ON ((sd.stxdmcv IS NOT NULL)))\n  WHERE ((NOT (EXISTS ( SELECT 1\n           FROM (unnest(s.stxkeys) k(k)\n             JOIN pg_attribute a ON (((a.attrelid = s.stxrelid) AND (a.attnum = k.k))))\n          WHERE (NOT has_column_privilege(c.oid, a.attnum, 'select'::text))))) AND ((c.relrowsecurity = false) OR (NOT row_security_active(c.oid))));")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stats_ext</code>
         */
        val PG_STATS_EXT: PgStatsExt = PgStatsExt()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stats_ext.schemaname</code>.
     */
    val SCHEMANAME: TableField<Record, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.tablename</code>.
     */
    val TABLENAME: TableField<Record, String?> = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_schemaname</code>.
     */
    val STATISTICS_SCHEMANAME: TableField<Record, String?> = createField(DSL.name("statistics_schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_name</code>.
     */
    val STATISTICS_NAME: TableField<Record, String?> = createField(DSL.name("statistics_name"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.statistics_owner</code>.
     */
    val STATISTICS_OWNER: TableField<Record, String?> = createField(DSL.name("statistics_owner"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.attnames</code>.
     */
    val ATTNAMES: TableField<Record, Array<String?>?> = createField(DSL.name("attnames"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.kinds</code>.
     */
    val KINDS: TableField<Record, Array<String?>?> = createField(DSL.name("kinds"), SQLDataType.CHAR.getArrayDataType(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val N_DISTINCT: TableField<Record, Any?> = createField(DSL.name("n_distinct"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_ndistinct\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val DEPENDENCIES: TableField<Record, Any?> = createField(DSL.name("dependencies"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_dependencies\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_vals</code>.
     */
    val MOST_COMMON_VALS: TableField<Record, Array<String?>?> = createField(DSL.name("most_common_vals"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_val_nulls</code>.
     */
    val MOST_COMMON_VAL_NULLS: TableField<Record, Array<Boolean?>?> = createField(DSL.name("most_common_val_nulls"), SQLDataType.BOOLEAN.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_freqs</code>.
     */
    val MOST_COMMON_FREQS: TableField<Record, Array<Double?>?> = createField(DSL.name("most_common_freqs"), SQLDataType.FLOAT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_stats_ext.most_common_base_freqs</code>.
     */
    val MOST_COMMON_BASE_FREQS: TableField<Record, Array<Double?>?> = createField(DSL.name("most_common_base_freqs"), SQLDataType.FLOAT.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stats_ext</code> table reference
     */
    constructor(): this(DSL.name("pg_stats_ext"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STATS_EXT, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatsExt = PgStatsExt(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatsExt = PgStatsExt(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatsExt = PgStatsExt(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatsExt = PgStatsExt(name, null)
}
