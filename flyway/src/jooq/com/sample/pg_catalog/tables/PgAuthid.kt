/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_AUTHID_OID_INDEX
import com.sample.pg_catalog.indexes.PG_AUTHID_ROLNAME_INDEX

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgAuthid(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_authid</code>
         */
        val PG_AUTHID: PgAuthid = PgAuthid()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_authid.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolname</code>.
     */
    val ROLNAME: TableField<Record, String?> = createField(DSL.name("rolname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolsuper</code>.
     */
    val ROLSUPER: TableField<Record, Boolean?> = createField(DSL.name("rolsuper"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolinherit</code>.
     */
    val ROLINHERIT: TableField<Record, Boolean?> = createField(DSL.name("rolinherit"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolcreaterole</code>.
     */
    val ROLCREATEROLE: TableField<Record, Boolean?> = createField(DSL.name("rolcreaterole"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolcreatedb</code>.
     */
    val ROLCREATEDB: TableField<Record, Boolean?> = createField(DSL.name("rolcreatedb"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolcanlogin</code>.
     */
    val ROLCANLOGIN: TableField<Record, Boolean?> = createField(DSL.name("rolcanlogin"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolreplication</code>.
     */
    val ROLREPLICATION: TableField<Record, Boolean?> = createField(DSL.name("rolreplication"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolbypassrls</code>.
     */
    val ROLBYPASSRLS: TableField<Record, Boolean?> = createField(DSL.name("rolbypassrls"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolconnlimit</code>.
     */
    val ROLCONNLIMIT: TableField<Record, Int?> = createField(DSL.name("rolconnlimit"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolpassword</code>.
     */
    val ROLPASSWORD: TableField<Record, String?> = createField(DSL.name("rolpassword"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_authid.rolvaliduntil</code>.
     */
    val ROLVALIDUNTIL: TableField<Record, OffsetDateTime?> = createField(DSL.name("rolvaliduntil"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_authid</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_authid</code> table reference
     */
    constructor(): this(DSL.name("pg_authid"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_AUTHID, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_AUTHID_OID_INDEX, PG_AUTHID_ROLNAME_INDEX)
    override fun `as`(alias: String): PgAuthid = PgAuthid(DSL.name(alias), this)
    override fun `as`(alias: Name): PgAuthid = PgAuthid(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgAuthid = PgAuthid(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgAuthid = PgAuthid(name, null)
}
