/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgUser(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_user\" as  SELECT pg_shadow.usename,\n    pg_shadow.usesysid,\n    pg_shadow.usecreatedb,\n    pg_shadow.usesuper,\n    pg_shadow.userepl,\n    pg_shadow.usebypassrls,\n    '********'::text AS passwd,\n    pg_shadow.valuntil,\n    pg_shadow.useconfig\n   FROM pg_shadow;")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_user</code>
         */
        val PG_USER: PgUser = PgUser()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_user.usename</code>.
     */
    val USENAME: TableField<Record, String?> = createField(DSL.name("usename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_user.usesysid</code>.
     */
    val USESYSID: TableField<Record, Long?> = createField(DSL.name("usesysid"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_user.usecreatedb</code>.
     */
    val USECREATEDB: TableField<Record, Boolean?> = createField(DSL.name("usecreatedb"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_user.usesuper</code>.
     */
    val USESUPER: TableField<Record, Boolean?> = createField(DSL.name("usesuper"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_user.userepl</code>.
     */
    val USEREPL: TableField<Record, Boolean?> = createField(DSL.name("userepl"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_user.usebypassrls</code>.
     */
    val USEBYPASSRLS: TableField<Record, Boolean?> = createField(DSL.name("usebypassrls"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_user.passwd</code>.
     */
    val PASSWD: TableField<Record, String?> = createField(DSL.name("passwd"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_user.valuntil</code>.
     */
    val VALUNTIL: TableField<Record, OffsetDateTime?> = createField(DSL.name("valuntil"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_user.useconfig</code>.
     */
    val USECONFIG: TableField<Record, Array<String?>?> = createField(DSL.name("useconfig"), SQLDataType.CLOB.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_user</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_user</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_user</code> table reference
     */
    constructor(): this(DSL.name("pg_user"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_USER, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgUser = PgUser(DSL.name(alias), this)
    override fun `as`(alias: Name): PgUser = PgUser(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgUser = PgUser(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgUser = PgUser(name, null)
}
