/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatSlru(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stat_slru\" as  SELECT s.name,\n    s.blks_zeroed,\n    s.blks_hit,\n    s.blks_read,\n    s.blks_written,\n    s.blks_exists,\n    s.flushes,\n    s.truncates,\n    s.stats_reset\n   FROM pg_stat_get_slru() s(name, blks_zeroed, blks_hit, blks_read, blks_written, blks_exists, flushes, truncates, stats_reset);")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_stat_slru</code>
         */
        val PG_STAT_SLRU: PgStatSlru = PgStatSlru()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_slru.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.blks_zeroed</code>.
     */
    val BLKS_ZEROED: TableField<Record, Long?> = createField(DSL.name("blks_zeroed"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.blks_hit</code>.
     */
    val BLKS_HIT: TableField<Record, Long?> = createField(DSL.name("blks_hit"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.blks_read</code>.
     */
    val BLKS_READ: TableField<Record, Long?> = createField(DSL.name("blks_read"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.blks_written</code>.
     */
    val BLKS_WRITTEN: TableField<Record, Long?> = createField(DSL.name("blks_written"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.blks_exists</code>.
     */
    val BLKS_EXISTS: TableField<Record, Long?> = createField(DSL.name("blks_exists"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.flushes</code>.
     */
    val FLUSHES: TableField<Record, Long?> = createField(DSL.name("flushes"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.truncates</code>.
     */
    val TRUNCATES: TableField<Record, Long?> = createField(DSL.name("truncates"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_slru.stats_reset</code>.
     */
    val STATS_RESET: TableField<Record, OffsetDateTime?> = createField(DSL.name("stats_reset"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_slru</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_slru</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_slru</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_slru"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_SLRU, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatSlru = PgStatSlru(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatSlru = PgStatSlru(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatSlru = PgStatSlru(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatSlru = PgStatSlru(name, null)
}
