/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_CONSTRAINT_CONNAME_NSP_INDEX
import com.sample.pg_catalog.indexes.PG_CONSTRAINT_CONPARENTID_INDEX
import com.sample.pg_catalog.indexes.PG_CONSTRAINT_CONRELID_CONTYPID_CONNAME_INDEX
import com.sample.pg_catalog.indexes.PG_CONSTRAINT_CONTYPID_INDEX
import com.sample.pg_catalog.indexes.PG_CONSTRAINT_OID_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgConstraint(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_constraint</code>
         */
        val PG_CONSTRAINT: PgConstraint = PgConstraint()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_constraint.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conname</code>.
     */
    val CONNAME: TableField<Record, String?> = createField(DSL.name("conname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.connamespace</code>.
     */
    val CONNAMESPACE: TableField<Record, Long?> = createField(DSL.name("connamespace"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.contype</code>.
     */
    val CONTYPE: TableField<Record, String?> = createField(DSL.name("contype"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.condeferrable</code>.
     */
    val CONDEFERRABLE: TableField<Record, Boolean?> = createField(DSL.name("condeferrable"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.condeferred</code>.
     */
    val CONDEFERRED: TableField<Record, Boolean?> = createField(DSL.name("condeferred"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.convalidated</code>.
     */
    val CONVALIDATED: TableField<Record, Boolean?> = createField(DSL.name("convalidated"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conrelid</code>.
     */
    val CONRELID: TableField<Record, Long?> = createField(DSL.name("conrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.contypid</code>.
     */
    val CONTYPID: TableField<Record, Long?> = createField(DSL.name("contypid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conindid</code>.
     */
    val CONINDID: TableField<Record, Long?> = createField(DSL.name("conindid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conparentid</code>.
     */
    val CONPARENTID: TableField<Record, Long?> = createField(DSL.name("conparentid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.confrelid</code>.
     */
    val CONFRELID: TableField<Record, Long?> = createField(DSL.name("confrelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.confupdtype</code>.
     */
    val CONFUPDTYPE: TableField<Record, String?> = createField(DSL.name("confupdtype"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.confdeltype</code>.
     */
    val CONFDELTYPE: TableField<Record, String?> = createField(DSL.name("confdeltype"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.confmatchtype</code>.
     */
    val CONFMATCHTYPE: TableField<Record, String?> = createField(DSL.name("confmatchtype"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conislocal</code>.
     */
    val CONISLOCAL: TableField<Record, Boolean?> = createField(DSL.name("conislocal"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.coninhcount</code>.
     */
    val CONINHCOUNT: TableField<Record, Int?> = createField(DSL.name("coninhcount"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.connoinherit</code>.
     */
    val CONNOINHERIT: TableField<Record, Boolean?> = createField(DSL.name("connoinherit"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conkey</code>.
     */
    val CONKEY: TableField<Record, Array<Short?>?> = createField(DSL.name("conkey"), SQLDataType.SMALLINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.confkey</code>.
     */
    val CONFKEY: TableField<Record, Array<Short?>?> = createField(DSL.name("confkey"), SQLDataType.SMALLINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conpfeqop</code>.
     */
    val CONPFEQOP: TableField<Record, Array<Long?>?> = createField(DSL.name("conpfeqop"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conppeqop</code>.
     */
    val CONPPEQOP: TableField<Record, Array<Long?>?> = createField(DSL.name("conppeqop"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conffeqop</code>.
     */
    val CONFFEQOP: TableField<Record, Array<Long?>?> = createField(DSL.name("conffeqop"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_constraint.conexclop</code>.
     */
    val CONEXCLOP: TableField<Record, Array<Long?>?> = createField(DSL.name("conexclop"), SQLDataType.BIGINT.getArrayDataType(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val CONBIN: TableField<Record, Any?> = createField(DSL.name("conbin"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_constraint</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_constraint</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_constraint</code> table reference
     */
    constructor(): this(DSL.name("pg_constraint"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_CONSTRAINT, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_CONSTRAINT_CONNAME_NSP_INDEX, PG_CONSTRAINT_CONPARENTID_INDEX, PG_CONSTRAINT_CONRELID_CONTYPID_CONNAME_INDEX, PG_CONSTRAINT_CONTYPID_INDEX, PG_CONSTRAINT_OID_INDEX)
    override fun `as`(alias: String): PgConstraint = PgConstraint(DSL.name(alias), this)
    override fun `as`(alias: Name): PgConstraint = PgConstraint(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgConstraint = PgConstraint(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgConstraint = PgConstraint(name, null)
}
