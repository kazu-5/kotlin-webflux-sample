/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatWalReceiver(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_stat_wal_receiver\" as  SELECT s.pid,\n    s.status,\n    s.receive_start_lsn,\n    s.receive_start_tli,\n    s.written_lsn,\n    s.flushed_lsn,\n    s.received_tli,\n    s.last_msg_send_time,\n    s.last_msg_receipt_time,\n    s.latest_end_lsn,\n    s.latest_end_time,\n    s.slot_name,\n    s.sender_host,\n    s.sender_port,\n    s.conninfo\n   FROM pg_stat_get_wal_receiver() s(pid, status, receive_start_lsn, receive_start_tli, written_lsn, flushed_lsn, received_tli, last_msg_send_time, last_msg_receipt_time, latest_end_lsn, latest_end_time, slot_name, sender_host, sender_port, conninfo)\n  WHERE (s.pid IS NOT NULL);")
) {
    companion object {

        /**
         * The reference instance of
         * <code>pg_catalog.pg_stat_wal_receiver</code>
         */
        val PG_STAT_WAL_RECEIVER: PgStatWalReceiver = PgStatWalReceiver()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.pid</code>.
     */
    val PID: TableField<Record, Int?> = createField(DSL.name("pid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.status</code>.
     */
    val STATUS: TableField<Record, String?> = createField(DSL.name("status"), SQLDataType.CLOB, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val RECEIVE_START_LSN: TableField<Record, Any?> = createField(DSL.name("receive_start_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_wal_receiver.receive_start_tli</code>.
     */
    val RECEIVE_START_TLI: TableField<Record, Int?> = createField(DSL.name("receive_start_tli"), SQLDataType.INTEGER, this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val WRITTEN_LSN: TableField<Record, Any?> = createField(DSL.name("written_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val FLUSHED_LSN: TableField<Record, Any?> = createField(DSL.name("flushed_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.received_tli</code>.
     */
    val RECEIVED_TLI: TableField<Record, Int?> = createField(DSL.name("received_tli"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_wal_receiver.last_msg_send_time</code>.
     */
    val LAST_MSG_SEND_TIME: TableField<Record, OffsetDateTime?> = createField(DSL.name("last_msg_send_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column
     * <code>pg_catalog.pg_stat_wal_receiver.last_msg_receipt_time</code>.
     */
    val LAST_MSG_RECEIPT_TIME: TableField<Record, OffsetDateTime?> = createField(DSL.name("last_msg_receipt_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val LATEST_END_LSN: TableField<Record, Any?> = createField(DSL.name("latest_end_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.latest_end_time</code>.
     */
    val LATEST_END_TIME: TableField<Record, OffsetDateTime?> = createField(DSL.name("latest_end_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.slot_name</code>.
     */
    val SLOT_NAME: TableField<Record, String?> = createField(DSL.name("slot_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.sender_host</code>.
     */
    val SENDER_HOST: TableField<Record, String?> = createField(DSL.name("sender_host"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.sender_port</code>.
     */
    val SENDER_PORT: TableField<Record, Int?> = createField(DSL.name("sender_port"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>pg_catalog.pg_stat_wal_receiver.conninfo</code>.
     */
    val CONNINFO: TableField<Record, String?> = createField(DSL.name("conninfo"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_stat_wal_receiver</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_stat_wal_receiver</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_stat_wal_receiver</code> table reference
     */
    constructor(): this(DSL.name("pg_stat_wal_receiver"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STAT_WAL_RECEIVER, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgStatWalReceiver = PgStatWalReceiver(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatWalReceiver = PgStatWalReceiver(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatWalReceiver = PgStatWalReceiver(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatWalReceiver = PgStatWalReceiver(name, null)
}
