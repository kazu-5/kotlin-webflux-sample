/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_OPFAMILY_AM_NAME_NSP_INDEX
import com.sample.pg_catalog.indexes.PG_OPFAMILY_OID_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgOpfamily(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_opfamily</code>
         */
        val PG_OPFAMILY: PgOpfamily = PgOpfamily()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_opfamily.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_opfamily.opfmethod</code>.
     */
    val OPFMETHOD: TableField<Record, Long?> = createField(DSL.name("opfmethod"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_opfamily.opfname</code>.
     */
    val OPFNAME: TableField<Record, String?> = createField(DSL.name("opfname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_opfamily.opfnamespace</code>.
     */
    val OPFNAMESPACE: TableField<Record, Long?> = createField(DSL.name("opfnamespace"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_opfamily.opfowner</code>.
     */
    val OPFOWNER: TableField<Record, Long?> = createField(DSL.name("opfowner"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_opfamily</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_opfamily</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_opfamily</code> table reference
     */
    constructor(): this(DSL.name("pg_opfamily"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_OPFAMILY, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_OPFAMILY_AM_NAME_NSP_INDEX, PG_OPFAMILY_OID_INDEX)
    override fun `as`(alias: String): PgOpfamily = PgOpfamily(DSL.name(alias), this)
    override fun `as`(alias: Name): PgOpfamily = PgOpfamily(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgOpfamily = PgOpfamily(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgOpfamily = PgOpfamily(name, null)
}
