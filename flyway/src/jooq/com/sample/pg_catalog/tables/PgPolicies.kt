/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgPolicies(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_policies\" as  SELECT n.nspname AS schemaname,\n    c.relname AS tablename,\n    pol.polname AS policyname,\n        CASE\n            WHEN pol.polpermissive THEN 'PERMISSIVE'::text\n            ELSE 'RESTRICTIVE'::text\n        END AS permissive,\n        CASE\n            WHEN (pol.polroles = '{0}'::oid[]) THEN (string_to_array('public'::text, ''::text))::name[]\n            ELSE ARRAY( SELECT pg_authid.rolname\n               FROM pg_authid\n              WHERE (pg_authid.oid = ANY (pol.polroles))\n              ORDER BY pg_authid.rolname)\n        END AS roles,\n        CASE pol.polcmd\n            WHEN 'r'::\"char\" THEN 'SELECT'::text\n            WHEN 'a'::\"char\" THEN 'INSERT'::text\n            WHEN 'w'::\"char\" THEN 'UPDATE'::text\n            WHEN 'd'::\"char\" THEN 'DELETE'::text\n            WHEN '*'::\"char\" THEN 'ALL'::text\n            ELSE NULL::text\n        END AS cmd,\n    pg_get_expr(pol.polqual, pol.polrelid) AS qual,\n    pg_get_expr(pol.polwithcheck, pol.polrelid) AS with_check\n   FROM ((pg_policy pol\n     JOIN pg_class c ON ((c.oid = pol.polrelid)))\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)));")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_policies</code>
         */
        val PG_POLICIES: PgPolicies = PgPolicies()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_policies.schemaname</code>.
     */
    val SCHEMANAME: TableField<Record, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.tablename</code>.
     */
    val TABLENAME: TableField<Record, String?> = createField(DSL.name("tablename"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.policyname</code>.
     */
    val POLICYNAME: TableField<Record, String?> = createField(DSL.name("policyname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.permissive</code>.
     */
    val PERMISSIVE: TableField<Record, String?> = createField(DSL.name("permissive"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.roles</code>.
     */
    val ROLES: TableField<Record, Array<String?>?> = createField(DSL.name("roles"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_policies.cmd</code>.
     */
    val CMD: TableField<Record, String?> = createField(DSL.name("cmd"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.qual</code>.
     */
    val QUAL: TableField<Record, String?> = createField(DSL.name("qual"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_policies.with_check</code>.
     */
    val WITH_CHECK: TableField<Record, String?> = createField(DSL.name("with_check"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_policies</code> table reference
     */
    constructor(): this(DSL.name("pg_policies"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_POLICIES, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgPolicies = PgPolicies(DSL.name(alias), this)
    override fun `as`(alias: Name): PgPolicies = PgPolicies(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgPolicies = PgPolicies(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgPolicies = PgPolicies(name, null)
}
