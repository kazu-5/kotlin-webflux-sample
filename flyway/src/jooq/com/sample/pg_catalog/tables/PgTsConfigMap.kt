/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_TS_CONFIG_MAP_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgTsConfigMap(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_ts_config_map</code>
         */
        val PG_TS_CONFIG_MAP: PgTsConfigMap = PgTsConfigMap()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapcfg</code>.
     */
    val MAPCFG: TableField<Record, Long?> = createField(DSL.name("mapcfg"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_ts_config_map.maptokentype</code>.
     */
    val MAPTOKENTYPE: TableField<Record, Int?> = createField(DSL.name("maptokentype"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapseqno</code>.
     */
    val MAPSEQNO: TableField<Record, Int?> = createField(DSL.name("mapseqno"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_ts_config_map.mapdict</code>.
     */
    val MAPDICT: TableField<Record, Long?> = createField(DSL.name("mapdict"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config_map</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_ts_config_map</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_ts_config_map</code> table reference
     */
    constructor(): this(DSL.name("pg_ts_config_map"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_TS_CONFIG_MAP, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_TS_CONFIG_MAP_INDEX)
    override fun `as`(alias: String): PgTsConfigMap = PgTsConfigMap(DSL.name(alias), this)
    override fun `as`(alias: Name): PgTsConfigMap = PgTsConfigMap(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgTsConfigMap = PgTsConfigMap(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgTsConfigMap = PgTsConfigMap(name, null)
}
