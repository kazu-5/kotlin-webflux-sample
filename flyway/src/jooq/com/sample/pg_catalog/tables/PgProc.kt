/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_PROC_OID_INDEX
import com.sample.pg_catalog.indexes.PG_PROC_PRONAME_ARGS_NSP_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgProc(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_proc</code>
         */
        val PG_PROC: PgProc = PgProc()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_proc.oid</code>.
     */
    val OID: TableField<Record, Long?> = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proname</code>.
     */
    val PRONAME: TableField<Record, String?> = createField(DSL.name("proname"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.pronamespace</code>.
     */
    val PRONAMESPACE: TableField<Record, Long?> = createField(DSL.name("pronamespace"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proowner</code>.
     */
    val PROOWNER: TableField<Record, Long?> = createField(DSL.name("proowner"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prolang</code>.
     */
    val PROLANG: TableField<Record, Long?> = createField(DSL.name("prolang"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.procost</code>.
     */
    val PROCOST: TableField<Record, Float?> = createField(DSL.name("procost"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prorows</code>.
     */
    val PROROWS: TableField<Record, Float?> = createField(DSL.name("prorows"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.provariadic</code>.
     */
    val PROVARIADIC: TableField<Record, Long?> = createField(DSL.name("provariadic"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prosupport</code>.
     */
    val PROSUPPORT: TableField<Record, String?> = createField(DSL.name("prosupport"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prokind</code>.
     */
    val PROKIND: TableField<Record, String?> = createField(DSL.name("prokind"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prosecdef</code>.
     */
    val PROSECDEF: TableField<Record, Boolean?> = createField(DSL.name("prosecdef"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proleakproof</code>.
     */
    val PROLEAKPROOF: TableField<Record, Boolean?> = createField(DSL.name("proleakproof"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proisstrict</code>.
     */
    val PROISSTRICT: TableField<Record, Boolean?> = createField(DSL.name("proisstrict"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proretset</code>.
     */
    val PRORETSET: TableField<Record, Boolean?> = createField(DSL.name("proretset"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.provolatile</code>.
     */
    val PROVOLATILE: TableField<Record, String?> = createField(DSL.name("provolatile"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proparallel</code>.
     */
    val PROPARALLEL: TableField<Record, String?> = createField(DSL.name("proparallel"), SQLDataType.CHAR.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.pronargs</code>.
     */
    val PRONARGS: TableField<Record, Short?> = createField(DSL.name("pronargs"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.pronargdefaults</code>.
     */
    val PRONARGDEFAULTS: TableField<Record, Short?> = createField(DSL.name("pronargdefaults"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prorettype</code>.
     */
    val PRORETTYPE: TableField<Record, Long?> = createField(DSL.name("prorettype"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proargtypes</code>.
     */
    val PROARGTYPES: TableField<Record, Array<Long?>?> = createField(DSL.name("proargtypes"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proallargtypes</code>.
     */
    val PROALLARGTYPES: TableField<Record, Array<Long?>?> = createField(DSL.name("proallargtypes"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proargmodes</code>.
     */
    val PROARGMODES: TableField<Record, Array<String?>?> = createField(DSL.name("proargmodes"), SQLDataType.CHAR.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proargnames</code>.
     */
    val PROARGNAMES: TableField<Record, Array<String?>?> = createField(DSL.name("proargnames"), SQLDataType.CLOB.getArrayDataType(), this, "")
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    val PROARGDEFAULTS: TableField<Record, Any?> = createField(DSL.name("proargdefaults"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.protrftypes</code>.
     */
    val PROTRFTYPES: TableField<Record, Array<Long?>?> = createField(DSL.name("protrftypes"), SQLDataType.BIGINT.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.prosrc</code>.
     */
    val PROSRC: TableField<Record, String?> = createField(DSL.name("prosrc"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.probin</code>.
     */
    val PROBIN: TableField<Record, String?> = createField(DSL.name("probin"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proconfig</code>.
     */
    val PROCONFIG: TableField<Record, Array<String?>?> = createField(DSL.name("proconfig"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_proc.proacl</code>.
     */
    val PROACL: TableField<Record, Array<String?>?> = createField(DSL.name("proacl"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_proc</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_proc</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_proc</code> table reference
     */
    constructor(): this(DSL.name("pg_proc"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_PROC, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_PROC_OID_INDEX, PG_PROC_PRONAME_ARGS_NSP_INDEX)
    override fun `as`(alias: String): PgProc = PgProc(DSL.name(alias), this)
    override fun `as`(alias: Name): PgProc = PgProc(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgProc = PgProc(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgProc = PgProc(name, null)
}
