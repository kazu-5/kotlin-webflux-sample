/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgMatviews(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"pg_matviews\" as  SELECT n.nspname AS schemaname,\n    c.relname AS matviewname,\n    pg_get_userbyid(c.relowner) AS matviewowner,\n    t.spcname AS tablespace,\n    c.relhasindex AS hasindexes,\n    c.relispopulated AS ispopulated,\n    pg_get_viewdef(c.oid) AS definition\n   FROM ((pg_class c\n     LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace)))\n     LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace)))\n  WHERE (c.relkind = 'm'::\"char\");")
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_matviews</code>
         */
        val PG_MATVIEWS: PgMatviews = PgMatviews()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_matviews.schemaname</code>.
     */
    val SCHEMANAME: TableField<Record, String?> = createField(DSL.name("schemaname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.matviewname</code>.
     */
    val MATVIEWNAME: TableField<Record, String?> = createField(DSL.name("matviewname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.matviewowner</code>.
     */
    val MATVIEWOWNER: TableField<Record, String?> = createField(DSL.name("matviewowner"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.tablespace</code>.
     */
    val TABLESPACE: TableField<Record, String?> = createField(DSL.name("tablespace"), SQLDataType.VARCHAR, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.hasindexes</code>.
     */
    val HASINDEXES: TableField<Record, Boolean?> = createField(DSL.name("hasindexes"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.ispopulated</code>.
     */
    val ISPOPULATED: TableField<Record, Boolean?> = createField(DSL.name("ispopulated"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>pg_catalog.pg_matviews.definition</code>.
     */
    val DEFINITION: TableField<Record, String?> = createField(DSL.name("definition"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_matviews</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_matviews</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_matviews</code> table reference
     */
    constructor(): this(DSL.name("pg_matviews"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_MATVIEWS, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun `as`(alias: String): PgMatviews = PgMatviews(DSL.name(alias), this)
    override fun `as`(alias: Name): PgMatviews = PgMatviews(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgMatviews = PgMatviews(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgMatviews = PgMatviews(name, null)
}
