/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.tables


import com.sample.pg_catalog.PgCatalog
import com.sample.pg_catalog.indexes.PG_STATISTIC_RELID_ATT_INH_INDEX

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatistic(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    PgCatalog.PG_CATALOG,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>pg_catalog.pg_statistic</code>
         */
        val PG_STATISTIC: PgStatistic = PgStatistic()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>pg_catalog.pg_statistic.starelid</code>.
     */
    val STARELID: TableField<Record, Long?> = createField(DSL.name("starelid"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staattnum</code>.
     */
    val STAATTNUM: TableField<Record, Short?> = createField(DSL.name("staattnum"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stainherit</code>.
     */
    val STAINHERIT: TableField<Record, Boolean?> = createField(DSL.name("stainherit"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanullfrac</code>.
     */
    val STANULLFRAC: TableField<Record, Float?> = createField(DSL.name("stanullfrac"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stawidth</code>.
     */
    val STAWIDTH: TableField<Record, Int?> = createField(DSL.name("stawidth"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stadistinct</code>.
     */
    val STADISTINCT: TableField<Record, Float?> = createField(DSL.name("stadistinct"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind1</code>.
     */
    val STAKIND1: TableField<Record, Short?> = createField(DSL.name("stakind1"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind2</code>.
     */
    val STAKIND2: TableField<Record, Short?> = createField(DSL.name("stakind2"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind3</code>.
     */
    val STAKIND3: TableField<Record, Short?> = createField(DSL.name("stakind3"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind4</code>.
     */
    val STAKIND4: TableField<Record, Short?> = createField(DSL.name("stakind4"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stakind5</code>.
     */
    val STAKIND5: TableField<Record, Short?> = createField(DSL.name("stakind5"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop1</code>.
     */
    val STAOP1: TableField<Record, Long?> = createField(DSL.name("staop1"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop2</code>.
     */
    val STAOP2: TableField<Record, Long?> = createField(DSL.name("staop2"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop3</code>.
     */
    val STAOP3: TableField<Record, Long?> = createField(DSL.name("staop3"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop4</code>.
     */
    val STAOP4: TableField<Record, Long?> = createField(DSL.name("staop4"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.staop5</code>.
     */
    val STAOP5: TableField<Record, Long?> = createField(DSL.name("staop5"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll1</code>.
     */
    val STACOLL1: TableField<Record, Long?> = createField(DSL.name("stacoll1"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll2</code>.
     */
    val STACOLL2: TableField<Record, Long?> = createField(DSL.name("stacoll2"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll3</code>.
     */
    val STACOLL3: TableField<Record, Long?> = createField(DSL.name("stacoll3"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll4</code>.
     */
    val STACOLL4: TableField<Record, Long?> = createField(DSL.name("stacoll4"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stacoll5</code>.
     */
    val STACOLL5: TableField<Record, Long?> = createField(DSL.name("stacoll5"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers1</code>.
     */
    val STANUMBERS1: TableField<Record, Array<Float?>?> = createField(DSL.name("stanumbers1"), SQLDataType.REAL.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers2</code>.
     */
    val STANUMBERS2: TableField<Record, Array<Float?>?> = createField(DSL.name("stanumbers2"), SQLDataType.REAL.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers3</code>.
     */
    val STANUMBERS3: TableField<Record, Array<Float?>?> = createField(DSL.name("stanumbers3"), SQLDataType.REAL.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers4</code>.
     */
    val STANUMBERS4: TableField<Record, Array<Float?>?> = createField(DSL.name("stanumbers4"), SQLDataType.REAL.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stanumbers5</code>.
     */
    val STANUMBERS5: TableField<Record, Array<Float?>?> = createField(DSL.name("stanumbers5"), SQLDataType.REAL.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues1</code>.
     */
    val STAVALUES1: TableField<Record, Array<Any?>?> = createField(DSL.name("stavalues1"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues2</code>.
     */
    val STAVALUES2: TableField<Record, Array<Any?>?> = createField(DSL.name("stavalues2"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues3</code>.
     */
    val STAVALUES3: TableField<Record, Array<Any?>?> = createField(DSL.name("stavalues3"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues4</code>.
     */
    val STAVALUES4: TableField<Record, Array<Any?>?> = createField(DSL.name("stavalues4"), SQLDataType.OTHER.getArrayDataType(), this, "")

    /**
     * The column <code>pg_catalog.pg_statistic.stavalues5</code>.
     */
    val STAVALUES5: TableField<Record, Array<Any?>?> = createField(DSL.name("stavalues5"), SQLDataType.OTHER.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>pg_catalog.pg_statistic</code> table reference
     */
    constructor(): this(DSL.name("pg_statistic"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PG_STATISTIC, null)
    override fun getSchema(): Schema? = if (aliased()) null else PgCatalog.PG_CATALOG
    override fun getIndexes(): List<Index> = listOf(PG_STATISTIC_RELID_ATT_INH_INDEX)
    override fun `as`(alias: String): PgStatistic = PgStatistic(DSL.name(alias), this)
    override fun `as`(alias: Name): PgStatistic = PgStatistic(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PgStatistic = PgStatistic(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PgStatistic = PgStatistic(name, null)
}
