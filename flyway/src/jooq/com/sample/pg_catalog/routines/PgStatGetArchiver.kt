/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.routines


import com.sample.pg_catalog.PgCatalog

import java.time.OffsetDateTime

import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PgStatGetArchiver : AbstractRoutine<java.lang.Void>("pg_stat_get_archiver", PgCatalog.PG_CATALOG) {
    companion object {

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.archived_count</code>.
         */
        val ARCHIVED_COUNT: Parameter<Long?> = Internal.createParameter("archived_count", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.last_archived_wal</code>.
         */
        val LAST_ARCHIVED_WAL: Parameter<String?> = Internal.createParameter("last_archived_wal", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.last_archived_time</code>.
         */
        val LAST_ARCHIVED_TIME: Parameter<OffsetDateTime?> = Internal.createParameter("last_archived_time", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.failed_count</code>.
         */
        val FAILED_COUNT: Parameter<Long?> = Internal.createParameter("failed_count", SQLDataType.BIGINT, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.last_failed_wal</code>.
         */
        val LAST_FAILED_WAL: Parameter<String?> = Internal.createParameter("last_failed_wal", SQLDataType.CLOB, false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.last_failed_time</code>.
         */
        val LAST_FAILED_TIME: Parameter<OffsetDateTime?> = Internal.createParameter("last_failed_time", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)

        /**
         * The parameter
         * <code>pg_catalog.pg_stat_get_archiver.stats_reset</code>.
         */
        val STATS_RESET: Parameter<OffsetDateTime?> = Internal.createParameter("stats_reset", SQLDataType.TIMESTAMPWITHTIMEZONE(6), false, false)
    }

    init {
        addOutParameter(ARCHIVED_COUNT)
        addOutParameter(LAST_ARCHIVED_WAL)
        addOutParameter(LAST_ARCHIVED_TIME)
        addOutParameter(FAILED_COUNT)
        addOutParameter(LAST_FAILED_WAL)
        addOutParameter(LAST_FAILED_TIME)
        addOutParameter(STATS_RESET)
    }

    /**
     * Get the <code>archived_count</code> parameter OUT value from the routine
     */
    fun getArchivedCount(): Long? = get(ARCHIVED_COUNT)

    /**
     * Get the <code>last_archived_wal</code> parameter OUT value from the
     * routine
     */
    fun getLastArchivedWal(): String? = get(LAST_ARCHIVED_WAL)

    /**
     * Get the <code>last_archived_time</code> parameter OUT value from the
     * routine
     */
    fun getLastArchivedTime(): OffsetDateTime? = get(LAST_ARCHIVED_TIME)

    /**
     * Get the <code>failed_count</code> parameter OUT value from the routine
     */
    fun getFailedCount(): Long? = get(FAILED_COUNT)

    /**
     * Get the <code>last_failed_wal</code> parameter OUT value from the routine
     */
    fun getLastFailedWal(): String? = get(LAST_FAILED_WAL)

    /**
     * Get the <code>last_failed_time</code> parameter OUT value from the
     * routine
     */
    fun getLastFailedTime(): OffsetDateTime? = get(LAST_FAILED_TIME)

    /**
     * Get the <code>stats_reset</code> parameter OUT value from the routine
     */
    fun getStatsReset(): OffsetDateTime? = get(STATS_RESET)
}
