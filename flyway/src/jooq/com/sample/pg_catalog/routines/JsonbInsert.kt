/*
 * This file is generated by jOOQ.
 */
package com.sample.pg_catalog.routines


import com.sample.pg_catalog.PgCatalog

import org.jooq.Field
import org.jooq.JSONB
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JsonbInsert : AbstractRoutine<JSONB>("jsonb_insert", PgCatalog.PG_CATALOG, SQLDataType.JSONB) {
    companion object {

        /**
         * The parameter <code>pg_catalog.jsonb_insert.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<JSONB?> = Internal.createParameter("RETURN_VALUE", SQLDataType.JSONB, false, false)

        /**
         * The parameter <code>pg_catalog.jsonb_insert.jsonb_in</code>.
         */
        val JSONB_IN: Parameter<JSONB?> = Internal.createParameter("jsonb_in", SQLDataType.JSONB, false, false)

        /**
         * The parameter <code>pg_catalog.jsonb_insert.path</code>.
         */
        val PATH: Parameter<Array<String?>?> = Internal.createParameter("path", SQLDataType.CLOB.getArrayDataType(), false, false)

        /**
         * The parameter <code>pg_catalog.jsonb_insert.replacement</code>.
         */
        val REPLACEMENT: Parameter<JSONB?> = Internal.createParameter("replacement", SQLDataType.JSONB, false, false)

        /**
         * The parameter <code>pg_catalog.jsonb_insert.insert_after</code>.
         */
        val INSERT_AFTER: Parameter<Boolean?> = Internal.createParameter("insert_after", SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), true, false)
    }

    init {
        returnParameter = RETURN_VALUE
        addInParameter(JSONB_IN)
        addInParameter(PATH)
        addInParameter(REPLACEMENT)
        addInParameter(INSERT_AFTER)
    }

    /**
     * Set the <code>jsonb_in</code> parameter IN value to the routine
     */
    fun setJsonbIn(value: JSONB?): Unit = setValue(JSONB_IN, value)

    /**
     * Set the <code>jsonb_in</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setJsonbIn(field: Field<JSONB?>): Unit {
        setField(JSONB_IN, field)
    }

    /**
     * Set the <code>path</code> parameter IN value to the routine
     */
    fun setPath(value: Array<String?>?): Unit = setValue(PATH, value)

    /**
     * Set the <code>path</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun setPath(field: Field<Array<String?>?>): Unit {
        setField(PATH, field)
    }

    /**
     * Set the <code>replacement</code> parameter IN value to the routine
     */
    fun setReplacement(value: JSONB?): Unit = setValue(REPLACEMENT, value)

    /**
     * Set the <code>replacement</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    fun setReplacement(field: Field<JSONB?>): Unit {
        setField(REPLACEMENT, field)
    }

    /**
     * Set the <code>insert_after</code> parameter IN value to the routine
     */
    fun setInsertAfter(value: Boolean?): Unit = setValue(INSERT_AFTER, value)

    /**
     * Set the <code>insert_after</code> parameter to the function to be used
     * with a {@link org.jooq.Select} statement
     */
    fun setInsertAfter(field: Field<Boolean?>): Unit {
        setField(INSERT_AFTER, field)
    }
}
