/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.routines.references


import com.sample.information_schema.routines._PgCharMaxLength
import com.sample.information_schema.routines._PgCharOctetLength
import com.sample.information_schema.routines._PgDatetimePrecision
import com.sample.information_schema.routines._PgIndexPosition
import com.sample.information_schema.routines._PgIntervalType
import com.sample.information_schema.routines._PgNumericPrecision
import com.sample.information_schema.routines._PgNumericPrecisionRadix
import com.sample.information_schema.routines._PgNumericScale
import com.sample.information_schema.routines._PgTruetypid
import com.sample.information_schema.routines._PgTruetypmod
import com.sample.information_schema.tables._PgExpandarray

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Record
import org.jooq.Result



/**
 * Call <code>information_schema._pg_char_max_length</code>
 */
fun _PgCharMaxLength(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgCharMaxLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_char_max_length</code> as a field.
 */
fun _PgCharMaxLength(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgCharMaxLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_char_max_length</code> as a field.
 */
fun _PgCharMaxLength(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgCharMaxLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_char_octet_length</code>
 */
fun _PgCharOctetLength(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgCharOctetLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_char_octet_length</code> as a field.
 */
fun _PgCharOctetLength(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgCharOctetLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_char_octet_length</code> as a field.
 */
fun _PgCharOctetLength(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgCharOctetLength()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_datetime_precision</code>
 */
fun _PgDatetimePrecision(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgDatetimePrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_datetime_precision</code> as a field.
 */
fun _PgDatetimePrecision(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgDatetimePrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_datetime_precision</code> as a field.
 */
fun _PgDatetimePrecision(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgDatetimePrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_index_position</code>
 */
fun _PgIndexPosition(
      configuration: Configuration
    , __1: Long?
    , __2: Short?
): Int? {
    val f = _PgIndexPosition()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_index_position</code> as a field.
 */
fun _PgIndexPosition(
      __1: Long?
    , __2: Short?
): Field<Int?> {
    val f = _PgIndexPosition()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_index_position</code> as a field.
 */
fun _PgIndexPosition(
      __1: Field<Long?>
    , __2: Field<Short?>
): Field<Int?> {
    val f = _PgIndexPosition()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_interval_type</code>
 */
fun _PgIntervalType(
      configuration: Configuration
    , typid: Long?
    , mod: Int?
): String? {
    val f = _PgIntervalType()
    f.setTypid(typid)
    f.setMod(mod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_interval_type</code> as a field.
 */
fun _PgIntervalType(
      typid: Long?
    , mod: Int?
): Field<String?> {
    val f = _PgIntervalType()
    f.setTypid(typid)
    f.setMod(mod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_interval_type</code> as a field.
 */
fun _PgIntervalType(
      typid: Field<Long?>
    , mod: Field<Int?>
): Field<String?> {
    val f = _PgIntervalType()
    f.setTypid(typid)
    f.setMod(mod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_numeric_precision</code>
 */
fun _PgNumericPrecision(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgNumericPrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_numeric_precision</code> as a field.
 */
fun _PgNumericPrecision(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgNumericPrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_numeric_precision</code> as a field.
 */
fun _PgNumericPrecision(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgNumericPrecision()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_numeric_precision_radix</code>
 */
fun _PgNumericPrecisionRadix(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgNumericPrecisionRadix()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_numeric_precision_radix</code> as a field.
 */
fun _PgNumericPrecisionRadix(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgNumericPrecisionRadix()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_numeric_precision_radix</code> as a field.
 */
fun _PgNumericPrecisionRadix(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgNumericPrecisionRadix()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_numeric_scale</code>
 */
fun _PgNumericScale(
      configuration: Configuration
    , typid: Long?
    , typmod: Int?
): Int? {
    val f = _PgNumericScale()
    f.setTypid(typid)
    f.setTypmod(typmod)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_numeric_scale</code> as a field.
 */
fun _PgNumericScale(
      typid: Long?
    , typmod: Int?
): Field<Int?> {
    val f = _PgNumericScale()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_numeric_scale</code> as a field.
 */
fun _PgNumericScale(
      typid: Field<Long?>
    , typmod: Field<Int?>
): Field<Int?> {
    val f = _PgNumericScale()
    f.setTypid(typid)
    f.setTypmod(typmod)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_truetypid</code>
 */
fun _PgTruetypid(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Long? {
    val f = _PgTruetypid()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_truetypid</code> as a field.
 */
fun _PgTruetypid(
      __1: Record?
    , __2: Record?
): Field<Long?> {
    val f = _PgTruetypid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_truetypid</code> as a field.
 */
fun _PgTruetypid(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Long?> {
    val f = _PgTruetypid()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_truetypmod</code>
 */
fun _PgTruetypmod(
      configuration: Configuration
    , __1: Record?
    , __2: Record?
): Int? {
    val f = _PgTruetypmod()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>information_schema._pg_truetypmod</code> as a field.
 */
fun _PgTruetypmod(
      __1: Record?
    , __2: Record?
): Field<Int?> {
    val f = _PgTruetypmod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>information_schema._pg_truetypmod</code> as a field.
 */
fun _PgTruetypmod(
      __1: Field<Record?>
    , __2: Field<Record?>
): Field<Int?> {
    val f = _PgTruetypmod()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>information_schema._pg_expandarray</code>.
 */
fun _PgExpandarray(
      configuration: Configuration
    , __1: Array<Any?>?
): Result<Record> = configuration.dsl().selectFrom(com.sample.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
      __1
)).fetch()

/**
 * Get <code>information_schema._pg_expandarray</code> as a table.
 */
fun _PgExpandarray(
      __1: Array<Any?>?
): _PgExpandarray = com.sample.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
    __1
)

/**
 * Get <code>information_schema._pg_expandarray</code> as a table.
 */
fun _PgExpandarray(
      __1: Field<Array<Any?>?>
): _PgExpandarray = com.sample.information_schema.tables._PgExpandarray._PG_EXPANDARRAY.call(
    __1
)
