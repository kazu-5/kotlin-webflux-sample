/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ReferentialConstraints(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"referential_constraints\" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (ncon.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (con.conname)::information_schema.sql_identifier AS constraint_name,\n    (\n        CASE\n            WHEN (npkc.nspname IS NULL) THEN NULL::name\n            ELSE current_database()\n        END)::information_schema.sql_identifier AS unique_constraint_catalog,\n    (npkc.nspname)::information_schema.sql_identifier AS unique_constraint_schema,\n    (pkc.conname)::information_schema.sql_identifier AS unique_constraint_name,\n    (\n        CASE con.confmatchtype\n            WHEN 'f'::\"char\" THEN 'FULL'::text\n            WHEN 'p'::\"char\" THEN 'PARTIAL'::text\n            WHEN 's'::\"char\" THEN 'NONE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS match_option,\n    (\n        CASE con.confupdtype\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS update_rule,\n    (\n        CASE con.confdeltype\n            WHEN 'c'::\"char\" THEN 'CASCADE'::text\n            WHEN 'n'::\"char\" THEN 'SET NULL'::text\n            WHEN 'd'::\"char\" THEN 'SET DEFAULT'::text\n            WHEN 'r'::\"char\" THEN 'RESTRICT'::text\n            WHEN 'a'::\"char\" THEN 'NO ACTION'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS delete_rule\n   FROM ((((((pg_namespace ncon\n     JOIN pg_constraint con ON ((ncon.oid = con.connamespace)))\n     JOIN pg_class c ON (((con.conrelid = c.oid) AND (con.contype = 'f'::\"char\"))))\n     LEFT JOIN pg_depend d1 ON (((d1.objid = con.oid) AND (d1.classid = ('pg_constraint'::regclass)::oid) AND (d1.refclassid = ('pg_class'::regclass)::oid) AND (d1.refobjsubid = 0))))\n     LEFT JOIN pg_depend d2 ON (((d2.refclassid = ('pg_constraint'::regclass)::oid) AND (d2.classid = ('pg_class'::regclass)::oid) AND (d2.objid = d1.refobjid) AND (d2.objsubid = 0) AND (d2.deptype = 'i'::\"char\"))))\n     LEFT JOIN pg_constraint pkc ON (((pkc.oid = d2.refobjid) AND (pkc.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\"])) AND (pkc.conrelid = con.confrelid))))\n     LEFT JOIN pg_namespace npkc ON ((pkc.connamespace = npkc.oid)))\n  WHERE (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'INSERT, UPDATE, REFERENCES'::text));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.referential_constraints</code>
         */
        val REFERENTIAL_CONSTRAINTS: ReferentialConstraints = ReferentialConstraints()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.referential_constraints.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<Record, String?> = createField(DSL.name("constraint_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<Record, String?> = createField(DSL.name("constraint_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<Record, String?> = createField(DSL.name("constraint_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.unique_constraint_catalog</code>.
     */
    val UNIQUE_CONSTRAINT_CATALOG: TableField<Record, String?> = createField(DSL.name("unique_constraint_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.unique_constraint_schema</code>.
     */
    val UNIQUE_CONSTRAINT_SCHEMA: TableField<Record, String?> = createField(DSL.name("unique_constraint_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.unique_constraint_name</code>.
     */
    val UNIQUE_CONSTRAINT_NAME: TableField<Record, String?> = createField(DSL.name("unique_constraint_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.match_option</code>.
     */
    val MATCH_OPTION: TableField<Record, String?> = createField(DSL.name("match_option"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.update_rule</code>.
     */
    val UPDATE_RULE: TableField<Record, String?> = createField(DSL.name("update_rule"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.referential_constraints.delete_rule</code>.
     */
    val DELETE_RULE: TableField<Record, String?> = createField(DSL.name("delete_rule"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.referential_constraints</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.referential_constraints</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.referential_constraints</code> table
     * reference
     */
    constructor(): this(DSL.name("referential_constraints"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, REFERENTIAL_CONSTRAINTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ReferentialConstraints = ReferentialConstraints(DSL.name(alias), this)
    override fun `as`(alias: Name): ReferentialConstraints = ReferentialConstraints(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ReferentialConstraints = ReferentialConstraints(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ReferentialConstraints = ReferentialConstraints(name, null)
}
