/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class KeyColumnUsage(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"key_column_usage\" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (ss.nc_nspname)::information_schema.sql_identifier AS constraint_schema,\n    (ss.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (ss.nr_nspname)::information_schema.sql_identifier AS table_schema,\n    (ss.relname)::information_schema.sql_identifier AS table_name,\n    (a.attname)::information_schema.sql_identifier AS column_name,\n    ((ss.x).n)::information_schema.cardinal_number AS ordinal_position,\n    (\n        CASE\n            WHEN (ss.contype = 'f'::\"char\") THEN information_schema._pg_index_position(ss.conindid, ss.confkey[(ss.x).n])\n            ELSE NULL::integer\n        END)::information_schema.cardinal_number AS position_in_unique_constraint\n   FROM pg_attribute a,\n    ( SELECT r.oid AS roid,\n            r.relname,\n            r.relowner,\n            nc.nspname AS nc_nspname,\n            nr.nspname AS nr_nspname,\n            c.oid AS coid,\n            c.conname,\n            c.contype,\n            c.conindid,\n            c.confkey,\n            c.confrelid,\n            information_schema._pg_expandarray(c.conkey) AS x\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = c.conrelid) AND (nc.oid = c.connamespace) AND (c.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\", 'f'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)))) ss\n  WHERE ((ss.roid = a.attrelid) AND (a.attnum = (ss.x).x) AND (NOT a.attisdropped) AND (pg_has_role(ss.relowner, 'USAGE'::text) OR has_column_privilege(ss.roid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.key_column_usage</code>
         */
        val KEY_COLUMN_USAGE: KeyColumnUsage = KeyColumnUsage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<Record, String?> = createField(DSL.name("constraint_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<Record, String?> = createField(DSL.name("constraint_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<Record, String?> = createField(DSL.name("constraint_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.key_column_usage.column_name</code>.
     */
    val COLUMN_NAME: TableField<Record, String?> = createField(DSL.name("column_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.ordinal_position</code>.
     */
    val ORDINAL_POSITION: TableField<Record, Int?> = createField(DSL.name("ordinal_position"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.key_column_usage.position_in_unique_constraint</code>.
     */
    val POSITION_IN_UNIQUE_CONSTRAINT: TableField<Record, Int?> = createField(DSL.name("position_in_unique_constraint"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.key_column_usage</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.key_column_usage</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.key_column_usage</code> table reference
     */
    constructor(): this(DSL.name("key_column_usage"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, KEY_COLUMN_USAGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): KeyColumnUsage = KeyColumnUsage(DSL.name(alias), this)
    override fun `as`(alias: Name): KeyColumnUsage = KeyColumnUsage(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): KeyColumnUsage = KeyColumnUsage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): KeyColumnUsage = KeyColumnUsage(name, null)
}
