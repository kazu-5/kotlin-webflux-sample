/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EnabledRoles(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"enabled_roles\" as  SELECT (a.rolname)::information_schema.sql_identifier AS role_name\n   FROM pg_authid a\n  WHERE pg_has_role(a.oid, 'USAGE'::text);")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.enabled_roles</code>
         */
        val ENABLED_ROLES: EnabledRoles = EnabledRoles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.enabled_roles.role_name</code>.
     */
    val ROLE_NAME: TableField<Record, String?> = createField(DSL.name("role_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.enabled_roles</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.enabled_roles</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.enabled_roles</code> table reference
     */
    constructor(): this(DSL.name("enabled_roles"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ENABLED_ROLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): EnabledRoles = EnabledRoles(DSL.name(alias), this)
    override fun `as`(alias: Name): EnabledRoles = EnabledRoles(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): EnabledRoles = EnabledRoles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): EnabledRoles = EnabledRoles(name, null)
}
