/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ForeignTableOptions(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"foreign_table_options\" as  SELECT t.foreign_table_catalog,\n    t.foreign_table_schema,\n    t.foreign_table_name,\n    ((pg_options_to_table(t.ftoptions)).option_name)::information_schema.sql_identifier AS option_name,\n    ((pg_options_to_table(t.ftoptions)).option_value)::information_schema.character_data AS option_value\n   FROM information_schema._pg_foreign_tables t;")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.foreign_table_options</code>
         */
        val FOREIGN_TABLE_OPTIONS: ForeignTableOptions = ForeignTableOptions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.foreign_table_options.foreign_table_catalog</code>.
     */
    val FOREIGN_TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("foreign_table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_table_options.foreign_table_schema</code>.
     */
    val FOREIGN_TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("foreign_table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_table_options.foreign_table_name</code>.
     */
    val FOREIGN_TABLE_NAME: TableField<Record, String?> = createField(DSL.name("foreign_table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_table_options.option_name</code>.
     */
    val OPTION_NAME: TableField<Record, String?> = createField(DSL.name("option_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.foreign_table_options.option_value</code>.
     */
    val OPTION_VALUE: TableField<Record, String?> = createField(DSL.name("option_value"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.foreign_table_options</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.foreign_table_options</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.foreign_table_options</code> table
     * reference
     */
    constructor(): this(DSL.name("foreign_table_options"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, FOREIGN_TABLE_OPTIONS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ForeignTableOptions = ForeignTableOptions(DSL.name(alias), this)
    override fun `as`(alias: Name): ForeignTableOptions = ForeignTableOptions(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ForeignTableOptions = ForeignTableOptions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ForeignTableOptions = ForeignTableOptions(name, null)
}
