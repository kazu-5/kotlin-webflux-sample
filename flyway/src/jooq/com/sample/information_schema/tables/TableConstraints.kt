/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TableConstraints(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"table_constraints\" as  SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (c.conname)::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS table_schema,\n    (r.relname)::information_schema.sql_identifier AS table_name,\n    (\n        CASE c.contype\n            WHEN 'c'::\"char\" THEN 'CHECK'::text\n            WHEN 'f'::\"char\" THEN 'FOREIGN KEY'::text\n            WHEN 'p'::\"char\" THEN 'PRIMARY KEY'::text\n            WHEN 'u'::\"char\" THEN 'UNIQUE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS constraint_type,\n    (\n        CASE\n            WHEN c.condeferrable THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_deferrable,\n    (\n        CASE\n            WHEN c.condeferred THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS initially_deferred,\n    ('YES'::character varying)::information_schema.yes_or_no AS enforced\n   FROM pg_namespace nc,\n    pg_namespace nr,\n    pg_constraint c,\n    pg_class r\n  WHERE ((nc.oid = c.connamespace) AND (nr.oid = r.relnamespace) AND (c.conrelid = r.oid) AND (c.contype <> ALL (ARRAY['t'::\"char\", 'x'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)))\nUNION ALL\n SELECT (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS constraint_schema,\n    (((((((nr.oid)::text || '_'::text) || (r.oid)::text) || '_'::text) || (a.attnum)::text) || '_not_null'::text))::information_schema.sql_identifier AS constraint_name,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nr.nspname)::information_schema.sql_identifier AS table_schema,\n    (r.relname)::information_schema.sql_identifier AS table_name,\n    ('CHECK'::character varying)::information_schema.character_data AS constraint_type,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_deferrable,\n    ('NO'::character varying)::information_schema.yes_or_no AS initially_deferred,\n    ('YES'::character varying)::information_schema.yes_or_no AS enforced\n   FROM pg_namespace nr,\n    pg_class r,\n    pg_attribute a\n  WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND a.attnotnull AND (a.attnum > 0) AND (NOT a.attisdropped) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nr.oid)) AND (pg_has_role(r.relowner, 'USAGE'::text) OR has_table_privilege(r.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(r.oid, 'INSERT, UPDATE, REFERENCES'::text)));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.table_constraints</code>
         */
        val TABLE_CONSTRAINTS: TableConstraints = TableConstraints()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<Record, String?> = createField(DSL.name("constraint_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<Record, String?> = createField(DSL.name("constraint_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<Record, String?> = createField(DSL.name("constraint_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.table_constraints.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.constraint_type</code>.
     */
    val CONSTRAINT_TYPE: TableField<Record, String?> = createField(DSL.name("constraint_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.is_deferrable</code>.
     */
    val IS_DEFERRABLE: TableField<Record, String?> = createField(DSL.name("is_deferrable"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.table_constraints.initially_deferred</code>.
     */
    val INITIALLY_DEFERRED: TableField<Record, String?> = createField(DSL.name("initially_deferred"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.table_constraints.enforced</code>.
     */
    val ENFORCED: TableField<Record, String?> = createField(DSL.name("enforced"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.table_constraints</code> table
     * reference
     */
    constructor(): this(DSL.name("table_constraints"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TABLE_CONSTRAINTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): TableConstraints = TableConstraints(DSL.name(alias), this)
    override fun `as`(alias: Name): TableConstraints = TableConstraints(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TableConstraints = TableConstraints(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TableConstraints = TableConstraints(name, null)
}
