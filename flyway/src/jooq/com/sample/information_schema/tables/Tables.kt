/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tables(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"tables\" as  SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (c.relname)::information_schema.sql_identifier AS table_name,\n    (\n        CASE\n            WHEN (nc.oid = pg_my_temp_schema()) THEN 'LOCAL TEMPORARY'::text\n            WHEN (c.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) THEN 'BASE TABLE'::text\n            WHEN (c.relkind = 'v'::\"char\") THEN 'VIEW'::text\n            WHEN (c.relkind = 'f'::\"char\") THEN 'FOREIGN'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS table_type,\n    (NULL::name)::information_schema.sql_identifier AS self_referencing_column_name,\n    (NULL::character varying)::information_schema.character_data AS reference_generation,\n    (\n        CASE\n            WHEN (t.typname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS user_defined_type_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS user_defined_type_schema,\n    (t.typname)::information_schema.sql_identifier AS user_defined_type_name,\n    (\n        CASE\n            WHEN ((c.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) OR ((c.relkind = ANY (ARRAY['v'::\"char\", 'f'::\"char\"])) AND ((pg_relation_is_updatable((c.oid)::regclass, false) & 8) = 8))) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_insertable_into,\n    (\n        CASE\n            WHEN (t.typname IS NOT NULL) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_typed,\n    (NULL::character varying)::information_schema.character_data AS commit_action\n   FROM ((pg_namespace nc\n     JOIN pg_class c ON ((nc.oid = c.relnamespace)))\n     LEFT JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((c.reloftype = t.oid)))\n  WHERE ((c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)));")
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.tables</code>
         */
        val TABLES: Tables = Tables()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.tables.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.table_type</code>.
     */
    val TABLE_TYPE: TableField<Record, String?> = createField(DSL.name("table_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.tables.self_referencing_column_name</code>.
     */
    val SELF_REFERENCING_COLUMN_NAME: TableField<Record, String?> = createField(DSL.name("self_referencing_column_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.reference_generation</code>.
     */
    val REFERENCE_GENERATION: TableField<Record, String?> = createField(DSL.name("reference_generation"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.tables.user_defined_type_catalog</code>.
     */
    val USER_DEFINED_TYPE_CATALOG: TableField<Record, String?> = createField(DSL.name("user_defined_type_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.tables.user_defined_type_schema</code>.
     */
    val USER_DEFINED_TYPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("user_defined_type_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.user_defined_type_name</code>.
     */
    val USER_DEFINED_TYPE_NAME: TableField<Record, String?> = createField(DSL.name("user_defined_type_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.is_insertable_into</code>.
     */
    val IS_INSERTABLE_INTO: TableField<Record, String?> = createField(DSL.name("is_insertable_into"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.is_typed</code>.
     */
    val IS_TYPED: TableField<Record, String?> = createField(DSL.name("is_typed"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.tables.commit_action</code>.
     */
    val COMMIT_ACTION: TableField<Record, String?> = createField(DSL.name("commit_action"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.tables</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.tables</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.tables</code> table reference
     */
    constructor(): this(DSL.name("tables"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TABLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Tables = Tables(DSL.name(alias), this)
    override fun `as`(alias: Name): Tables = Tables(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tables = Tables(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tables = Tables(name, null)
}
