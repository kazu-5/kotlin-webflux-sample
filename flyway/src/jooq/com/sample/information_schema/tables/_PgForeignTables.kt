/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class _PgForeignTables(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"_pg_foreign_tables\" as  SELECT (current_database())::information_schema.sql_identifier AS foreign_table_catalog,\n    (n.nspname)::information_schema.sql_identifier AS foreign_table_schema,\n    (c.relname)::information_schema.sql_identifier AS foreign_table_name,\n    t.ftoptions,\n    (current_database())::information_schema.sql_identifier AS foreign_server_catalog,\n    (s.srvname)::information_schema.sql_identifier AS foreign_server_name,\n    (u.rolname)::information_schema.sql_identifier AS authorization_identifier\n   FROM pg_foreign_table t,\n    pg_foreign_server s,\n    pg_foreign_data_wrapper w,\n    pg_authid u,\n    pg_namespace n,\n    pg_class c\n  WHERE ((w.oid = s.srvfdw) AND (u.oid = c.relowner) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES'::text)) AND (n.oid = c.relnamespace) AND (c.oid = t.ftrelid) AND (c.relkind = 'f'::\"char\") AND (s.oid = t.ftserver));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema._pg_foreign_tables</code>
         */
        val _PG_FOREIGN_TABLES: _PgForeignTables = _PgForeignTables()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.foreign_table_catalog</code>.
     */
    val FOREIGN_TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("foreign_table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.foreign_table_schema</code>.
     */
    val FOREIGN_TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("foreign_table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.foreign_table_name</code>.
     */
    val FOREIGN_TABLE_NAME: TableField<Record, String?> = createField(DSL.name("foreign_table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema._pg_foreign_tables.ftoptions</code>.
     */
    val FTOPTIONS: TableField<Record, Array<String?>?> = createField(DSL.name("ftoptions"), SQLDataType.CLOB.getArrayDataType(), this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.foreign_server_catalog</code>.
     */
    val FOREIGN_SERVER_CATALOG: TableField<Record, String?> = createField(DSL.name("foreign_server_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.foreign_server_name</code>.
     */
    val FOREIGN_SERVER_NAME: TableField<Record, String?> = createField(DSL.name("foreign_server_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_tables.authorization_identifier</code>.
     */
    val AUTHORIZATION_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("authorization_identifier"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema._pg_foreign_tables</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema._pg_foreign_tables</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema._pg_foreign_tables</code> table
     * reference
     */
    constructor(): this(DSL.name("_pg_foreign_tables"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, _PG_FOREIGN_TABLES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): _PgForeignTables = _PgForeignTables(DSL.name(alias), this)
    override fun `as`(alias: Name): _PgForeignTables = _PgForeignTables(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): _PgForeignTables = _PgForeignTables(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): _PgForeignTables = _PgForeignTables(name, null)
}
