/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Parameters(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"parameters\" as  SELECT (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (ss.n_nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(ss.proname, ss.p_oid))::information_schema.sql_identifier AS specific_name,\n    ((ss.x).n)::information_schema.cardinal_number AS ordinal_position,\n    (\n        CASE\n            WHEN (ss.proargmodes IS NULL) THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'i'::\"char\") THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'o'::\"char\") THEN 'OUT'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'b'::\"char\") THEN 'INOUT'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 'v'::\"char\") THEN 'IN'::text\n            WHEN (ss.proargmodes[(ss.x).n] = 't'::\"char\") THEN 'OUT'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS parameter_mode,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_result,\n    ('NO'::character varying)::information_schema.yes_or_no AS as_locator,\n    (NULLIF(ss.proargnames[(ss.x).n], ''::text))::information_schema.sql_identifier AS parameter_name,\n    (\n        CASE\n            WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (NULL::name)::information_schema.sql_identifier AS collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (current_database())::information_schema.sql_identifier AS udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS udt_schema,\n    (t.typname)::information_schema.sql_identifier AS udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    ((ss.x).n)::information_schema.sql_identifier AS dtd_identifier,\n    (\n        CASE\n            WHEN pg_has_role(ss.proowner, 'USAGE'::text) THEN pg_get_function_arg_default(ss.p_oid, (ss.x).n)\n            ELSE NULL::text\n        END)::information_schema.character_data AS parameter_default\n   FROM pg_type t,\n    pg_namespace nt,\n    ( SELECT n.nspname AS n_nspname,\n            p.proname,\n            p.oid AS p_oid,\n            p.proowner,\n            p.proargnames,\n            p.proargmodes,\n            information_schema._pg_expandarray(COALESCE(p.proallargtypes, (p.proargtypes)::oid[])) AS x\n           FROM pg_namespace n,\n            pg_proc p\n          WHERE ((n.oid = p.pronamespace) AND (pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.oid, 'EXECUTE'::text)))) ss\n  WHERE ((t.oid = (ss.x).x) AND (t.typnamespace = nt.oid));")
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.parameters</code>
         */
        val PARAMETERS: Parameters = Parameters()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.parameters.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("specific_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("specific_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("specific_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.ordinal_position</code>.
     */
    val ORDINAL_POSITION: TableField<Record, Int?> = createField(DSL.name("ordinal_position"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.parameter_mode</code>.
     */
    val PARAMETER_MODE: TableField<Record, String?> = createField(DSL.name("parameter_mode"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.is_result</code>.
     */
    val IS_RESULT: TableField<Record, String?> = createField(DSL.name("is_result"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.as_locator</code>.
     */
    val AS_LOCATOR: TableField<Record, String?> = createField(DSL.name("as_locator"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.parameter_name</code>.
     */
    val PARAMETER_NAME: TableField<Record, String?> = createField(DSL.name("parameter_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.data_type</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("data_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_maximum_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_octet_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("character_set_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("character_set_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("character_set_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("collation_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("collation_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.collation_name</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("collation_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("numeric_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("numeric_precision_radix"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("numeric_scale"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("datetime_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("interval_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("interval_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("udt_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("udt_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.udt_name</code>.
     */
    val UDT_NAME: TableField<Record, String?> = createField(DSL.name("udt_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("scope_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("scope_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.scope_name</code>.
     */
    val SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("scope_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.parameters.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("maximum_cardinality"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("dtd_identifier"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.parameters.parameter_default</code>.
     */
    val PARAMETER_DEFAULT: TableField<Record, String?> = createField(DSL.name("parameter_default"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.parameters</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.parameters</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.parameters</code> table reference
     */
    constructor(): this(DSL.name("parameters"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, PARAMETERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Parameters = Parameters(DSL.name(alias), this)
    override fun `as`(alias: Name): Parameters = Parameters(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Parameters = Parameters(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Parameters = Parameters(name, null)
}
