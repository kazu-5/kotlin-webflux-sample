/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Sequences(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"sequences\" as  SELECT (current_database())::information_schema.sql_identifier AS sequence_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS sequence_schema,\n    (c.relname)::information_schema.sql_identifier AS sequence_name,\n    (format_type(s.seqtypid, NULL::integer))::information_schema.character_data AS data_type,\n    (information_schema._pg_numeric_precision(s.seqtypid, '-1'::integer))::information_schema.cardinal_number AS numeric_precision,\n    (2)::information_schema.cardinal_number AS numeric_precision_radix,\n    (0)::information_schema.cardinal_number AS numeric_scale,\n    (s.seqstart)::information_schema.character_data AS start_value,\n    (s.seqmin)::information_schema.character_data AS minimum_value,\n    (s.seqmax)::information_schema.character_data AS maximum_value,\n    (s.seqincrement)::information_schema.character_data AS increment,\n    (\n        CASE\n            WHEN s.seqcycle THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS cycle_option\n   FROM pg_namespace nc,\n    pg_class c,\n    pg_sequence s\n  WHERE ((c.relnamespace = nc.oid) AND (c.relkind = 'S'::\"char\") AND (NOT (EXISTS ( SELECT 1\n           FROM pg_depend\n          WHERE ((pg_depend.classid = ('pg_class'::regclass)::oid) AND (pg_depend.objid = c.oid) AND (pg_depend.deptype = 'i'::\"char\"))))) AND (NOT pg_is_other_temp_schema(nc.oid)) AND (c.oid = s.seqrelid) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_sequence_privilege(c.oid, 'SELECT, UPDATE, USAGE'::text)));")
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.sequences</code>
         */
        val SEQUENCES: Sequences = Sequences()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.sequences.sequence_catalog</code>.
     */
    val SEQUENCE_CATALOG: TableField<Record, String?> = createField(DSL.name("sequence_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.sequence_schema</code>.
     */
    val SEQUENCE_SCHEMA: TableField<Record, String?> = createField(DSL.name("sequence_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.sequence_name</code>.
     */
    val SEQUENCE_NAME: TableField<Record, String?> = createField(DSL.name("sequence_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.data_type</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("data_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("numeric_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.sequences.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("numeric_precision_radix"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("numeric_scale"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.start_value</code>.
     */
    val START_VALUE: TableField<Record, String?> = createField(DSL.name("start_value"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.minimum_value</code>.
     */
    val MINIMUM_VALUE: TableField<Record, String?> = createField(DSL.name("minimum_value"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.maximum_value</code>.
     */
    val MAXIMUM_VALUE: TableField<Record, String?> = createField(DSL.name("maximum_value"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.increment</code>.
     */
    val INCREMENT: TableField<Record, String?> = createField(DSL.name("increment"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.sequences.cycle_option</code>.
     */
    val CYCLE_OPTION: TableField<Record, String?> = createField(DSL.name("cycle_option"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.sequences</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.sequences</code> table reference
     */
    constructor(): this(DSL.name("sequences"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, SEQUENCES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Sequences = Sequences(DSL.name(alias), this)
    override fun `as`(alias: Name): Sequences = Sequences(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Sequences = Sequences(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Sequences = Sequences(name, null)
}
