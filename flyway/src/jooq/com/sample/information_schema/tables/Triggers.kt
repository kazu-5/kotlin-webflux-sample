/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Triggers(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"triggers\" as  SELECT (current_database())::information_schema.sql_identifier AS trigger_catalog,\n    (n.nspname)::information_schema.sql_identifier AS trigger_schema,\n    (t.tgname)::information_schema.sql_identifier AS trigger_name,\n    (em.text)::information_schema.character_data AS event_manipulation,\n    (current_database())::information_schema.sql_identifier AS event_object_catalog,\n    (n.nspname)::information_schema.sql_identifier AS event_object_schema,\n    (c.relname)::information_schema.sql_identifier AS event_object_table,\n    (rank() OVER (PARTITION BY (n.nspname)::information_schema.sql_identifier, (c.relname)::information_schema.sql_identifier, em.num, ((t.tgtype)::integer & 1), ((t.tgtype)::integer & 66) ORDER BY t.tgname))::information_schema.cardinal_number AS action_order,\n    (\n        CASE\n            WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN (regexp_match(pg_get_triggerdef(t.oid), '.{35,} WHEN \\((.+)\\) EXECUTE FUNCTION'::text))[1]\n            ELSE NULL::text\n        END)::information_schema.character_data AS action_condition,\n    (\"substring\"(pg_get_triggerdef(t.oid), (\"position\"(\"substring\"(pg_get_triggerdef(t.oid), 48), 'EXECUTE FUNCTION'::text) + 47)))::information_schema.character_data AS action_statement,\n    (\n        CASE ((t.tgtype)::integer & 1)\n            WHEN 1 THEN 'ROW'::text\n            ELSE 'STATEMENT'::text\n        END)::information_schema.character_data AS action_orientation,\n    (\n        CASE ((t.tgtype)::integer & 66)\n            WHEN 2 THEN 'BEFORE'::text\n            WHEN 64 THEN 'INSTEAD OF'::text\n            ELSE 'AFTER'::text\n        END)::information_schema.character_data AS action_timing,\n    (t.tgoldtable)::information_schema.sql_identifier AS action_reference_old_table,\n    (t.tgnewtable)::information_schema.sql_identifier AS action_reference_new_table,\n    (NULL::name)::information_schema.sql_identifier AS action_reference_old_row,\n    (NULL::name)::information_schema.sql_identifier AS action_reference_new_row,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS created\n   FROM pg_namespace n,\n    pg_class c,\n    pg_trigger t,\n    ( VALUES (4,'INSERT'::text), (8,'DELETE'::text), (16,'UPDATE'::text)) em(num, text)\n  WHERE ((n.oid = c.relnamespace) AND (c.oid = t.tgrelid) AND (((t.tgtype)::integer & em.num) <> 0) AND (NOT t.tgisinternal) AND (NOT pg_is_other_temp_schema(n.oid)) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_table_privilege(c.oid, 'INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'::text) OR has_any_column_privilege(c.oid, 'INSERT, UPDATE, REFERENCES'::text)));")
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.triggers</code>
         */
        val TRIGGERS: Triggers = Triggers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.triggers.trigger_catalog</code>.
     */
    val TRIGGER_CATALOG: TableField<Record, String?> = createField(DSL.name("trigger_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.trigger_schema</code>.
     */
    val TRIGGER_SCHEMA: TableField<Record, String?> = createField(DSL.name("trigger_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.trigger_name</code>.
     */
    val TRIGGER_NAME: TableField<Record, String?> = createField(DSL.name("trigger_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_manipulation</code>.
     */
    val EVENT_MANIPULATION: TableField<Record, String?> = createField(DSL.name("event_manipulation"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_catalog</code>.
     */
    val EVENT_OBJECT_CATALOG: TableField<Record, String?> = createField(DSL.name("event_object_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_schema</code>.
     */
    val EVENT_OBJECT_SCHEMA: TableField<Record, String?> = createField(DSL.name("event_object_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.event_object_table</code>.
     */
    val EVENT_OBJECT_TABLE: TableField<Record, String?> = createField(DSL.name("event_object_table"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_order</code>.
     */
    val ACTION_ORDER: TableField<Record, Int?> = createField(DSL.name("action_order"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_condition</code>.
     */
    val ACTION_CONDITION: TableField<Record, String?> = createField(DSL.name("action_condition"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_statement</code>.
     */
    val ACTION_STATEMENT: TableField<Record, String?> = createField(DSL.name("action_statement"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_orientation</code>.
     */
    val ACTION_ORIENTATION: TableField<Record, String?> = createField(DSL.name("action_orientation"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.action_timing</code>.
     */
    val ACTION_TIMING: TableField<Record, String?> = createField(DSL.name("action_timing"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_table</code>.
     */
    val ACTION_REFERENCE_OLD_TABLE: TableField<Record, String?> = createField(DSL.name("action_reference_old_table"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_table</code>.
     */
    val ACTION_REFERENCE_NEW_TABLE: TableField<Record, String?> = createField(DSL.name("action_reference_new_table"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_old_row</code>.
     */
    val ACTION_REFERENCE_OLD_ROW: TableField<Record, String?> = createField(DSL.name("action_reference_old_row"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.triggers.action_reference_new_row</code>.
     */
    val ACTION_REFERENCE_NEW_ROW: TableField<Record, String?> = createField(DSL.name("action_reference_new_row"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.triggers.created</code>.
     */
    val CREATED: TableField<Record, OffsetDateTime?> = createField(DSL.name("created"), com.sample.information_schema.domains.TIME_STAMP.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.triggers</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.triggers</code> table reference
     */
    constructor(): this(DSL.name("triggers"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TRIGGERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Triggers = Triggers(DSL.name(alias), this)
    override fun `as`(alias: Name): Triggers = Triggers(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Triggers = Triggers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Triggers = Triggers(name, null)
}
