/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ColumnPrivileges(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"column_privileges\" as  SELECT (u_grantor.rolname)::information_schema.sql_identifier AS grantor,\n    (grantee.rolname)::information_schema.sql_identifier AS grantee,\n    (current_database())::information_schema.sql_identifier AS table_catalog,\n    (nc.nspname)::information_schema.sql_identifier AS table_schema,\n    (x.relname)::information_schema.sql_identifier AS table_name,\n    (x.attname)::information_schema.sql_identifier AS column_name,\n    (x.prtype)::information_schema.character_data AS privilege_type,\n    (\n        CASE\n            WHEN (pg_has_role(x.grantee, x.relowner, 'USAGE'::text) OR x.grantable) THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_grantable\n   FROM ( SELECT pr_c.grantor,\n            pr_c.grantee,\n            a.attname,\n            pr_c.relname,\n            pr_c.relnamespace,\n            pr_c.prtype,\n            pr_c.grantable,\n            pr_c.relowner\n           FROM ( SELECT pg_class.oid,\n                    pg_class.relname,\n                    pg_class.relnamespace,\n                    pg_class.relowner,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantor AS grantor,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).grantee AS grantee,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).privilege_type AS privilege_type,\n                    (aclexplode(COALESCE(pg_class.relacl, acldefault('r'::\"char\", pg_class.relowner)))).is_grantable AS is_grantable\n                   FROM pg_class\n                  WHERE (pg_class.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"]))) pr_c(oid, relname, relnamespace, relowner, grantor, grantee, prtype, grantable),\n            pg_attribute a\n          WHERE ((a.attrelid = pr_c.oid) AND (a.attnum > 0) AND (NOT a.attisdropped))\n        UNION\n         SELECT pr_a.grantor,\n            pr_a.grantee,\n            pr_a.attname,\n            c.relname,\n            c.relnamespace,\n            pr_a.prtype,\n            pr_a.grantable,\n            c.relowner\n           FROM ( SELECT a.attrelid,\n                    a.attname,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).grantor AS grantor,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).grantee AS grantee,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).privilege_type AS privilege_type,\n                    (aclexplode(COALESCE(a.attacl, acldefault('c'::\"char\", cc.relowner)))).is_grantable AS is_grantable\n                   FROM (pg_attribute a\n                     JOIN pg_class cc ON ((a.attrelid = cc.oid)))\n                  WHERE ((a.attnum > 0) AND (NOT a.attisdropped))) pr_a(attrelid, attname, grantor, grantee, prtype, grantable),\n            pg_class c\n          WHERE ((pr_a.attrelid = c.oid) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'f'::\"char\", 'p'::\"char\"])))) x,\n    pg_namespace nc,\n    pg_authid u_grantor,\n    ( SELECT pg_authid.oid,\n            pg_authid.rolname\n           FROM pg_authid\n        UNION ALL\n         SELECT (0)::oid AS oid,\n            'PUBLIC'::name) grantee(oid, rolname)\n  WHERE ((x.relnamespace = nc.oid) AND (x.grantee = grantee.oid) AND (x.grantor = u_grantor.oid) AND (x.prtype = ANY (ARRAY['INSERT'::text, 'SELECT'::text, 'UPDATE'::text, 'REFERENCES'::text])) AND (pg_has_role(u_grantor.oid, 'USAGE'::text) OR pg_has_role(grantee.oid, 'USAGE'::text) OR (grantee.rolname = 'PUBLIC'::name)));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.column_privileges</code>
         */
        val COLUMN_PRIVILEGES: ColumnPrivileges = ColumnPrivileges()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.column_privileges.grantor</code>.
     */
    val GRANTOR: TableField<Record, String?> = createField(DSL.name("grantor"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.column_privileges.grantee</code>.
     */
    val GRANTEE: TableField<Record, String?> = createField(DSL.name("grantee"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.column_privileges.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.column_privileges.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.column_privileges.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.column_privileges.column_name</code>.
     */
    val COLUMN_NAME: TableField<Record, String?> = createField(DSL.name("column_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.column_privileges.privilege_type</code>.
     */
    val PRIVILEGE_TYPE: TableField<Record, String?> = createField(DSL.name("privilege_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.column_privileges.is_grantable</code>.
     */
    val IS_GRANTABLE: TableField<Record, String?> = createField(DSL.name("is_grantable"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.column_privileges</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.column_privileges</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.column_privileges</code> table
     * reference
     */
    constructor(): this(DSL.name("column_privileges"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, COLUMN_PRIVILEGES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ColumnPrivileges = ColumnPrivileges(DSL.name(alias), this)
    override fun `as`(alias: Name): ColumnPrivileges = ColumnPrivileges(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ColumnPrivileges = ColumnPrivileges(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ColumnPrivileges = ColumnPrivileges(name, null)
}
