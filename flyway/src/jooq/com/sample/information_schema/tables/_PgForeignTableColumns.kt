/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class _PgForeignTableColumns(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"_pg_foreign_table_columns\" as  SELECT n.nspname,\n    c.relname,\n    a.attname,\n    a.attfdwoptions\n   FROM pg_foreign_table t,\n    pg_authid u,\n    pg_namespace n,\n    pg_class c,\n    pg_attribute a\n  WHERE ((u.oid = c.relowner) AND (pg_has_role(c.relowner, 'USAGE'::text) OR has_column_privilege(c.oid, a.attnum, 'SELECT, INSERT, UPDATE, REFERENCES'::text)) AND (n.oid = c.relnamespace) AND (c.oid = t.ftrelid) AND (c.relkind = 'f'::\"char\") AND (a.attrelid = c.oid) AND (a.attnum > 0));")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema._pg_foreign_table_columns</code>
         */
        val _PG_FOREIGN_TABLE_COLUMNS: _PgForeignTableColumns = _PgForeignTableColumns()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.nspname</code>.
     */
    val NSPNAME: TableField<Record, String?> = createField(DSL.name("nspname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.relname</code>.
     */
    val RELNAME: TableField<Record, String?> = createField(DSL.name("relname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.attname</code>.
     */
    val ATTNAME: TableField<Record, String?> = createField(DSL.name("attname"), SQLDataType.VARCHAR, this, "")

    /**
     * The column
     * <code>information_schema._pg_foreign_table_columns.attfdwoptions</code>.
     */
    val ATTFDWOPTIONS: TableField<Record, Array<String?>?> = createField(DSL.name("attfdwoptions"), SQLDataType.CLOB.getArrayDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>information_schema._pg_foreign_table_columns</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>information_schema._pg_foreign_table_columns</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema._pg_foreign_table_columns</code> table
     * reference
     */
    constructor(): this(DSL.name("_pg_foreign_table_columns"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, _PG_FOREIGN_TABLE_COLUMNS, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): _PgForeignTableColumns = _PgForeignTableColumns(DSL.name(alias), this)
    override fun `as`(alias: Name): _PgForeignTableColumns = _PgForeignTableColumns(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): _PgForeignTableColumns = _PgForeignTableColumns(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): _PgForeignTableColumns = _PgForeignTableColumns(name, null)
}
