/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Routines(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"routines\" as  SELECT (current_database())::information_schema.sql_identifier AS specific_catalog,\n    (n.nspname)::information_schema.sql_identifier AS specific_schema,\n    (nameconcatoid(p.proname, p.oid))::information_schema.sql_identifier AS specific_name,\n    (current_database())::information_schema.sql_identifier AS routine_catalog,\n    (n.nspname)::information_schema.sql_identifier AS routine_schema,\n    (p.proname)::information_schema.sql_identifier AS routine_name,\n    (\n        CASE p.prokind\n            WHEN 'f'::\"char\" THEN 'FUNCTION'::text\n            WHEN 'p'::\"char\" THEN 'PROCEDURE'::text\n            ELSE NULL::text\n        END)::information_schema.character_data AS routine_type,\n    (NULL::name)::information_schema.sql_identifier AS module_catalog,\n    (NULL::name)::information_schema.sql_identifier AS module_schema,\n    (NULL::name)::information_schema.sql_identifier AS module_name,\n    (NULL::name)::information_schema.sql_identifier AS udt_catalog,\n    (NULL::name)::information_schema.sql_identifier AS udt_schema,\n    (NULL::name)::information_schema.sql_identifier AS udt_name,\n    (\n        CASE\n            WHEN (p.prokind = 'p'::\"char\") THEN NULL::text\n            WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text\n            WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)\n            ELSE 'USER-DEFINED'::text\n        END)::information_schema.character_data AS data_type,\n    (NULL::integer)::information_schema.cardinal_number AS character_maximum_length,\n    (NULL::integer)::information_schema.cardinal_number AS character_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS character_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS character_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS character_set_name,\n    (NULL::name)::information_schema.sql_identifier AS collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS interval_precision,\n    (\n        CASE\n            WHEN (nt.nspname IS NOT NULL) THEN current_database()\n            ELSE NULL::name\n        END)::information_schema.sql_identifier AS type_udt_catalog,\n    (nt.nspname)::information_schema.sql_identifier AS type_udt_schema,\n    (t.typname)::information_schema.sql_identifier AS type_udt_name,\n    (NULL::name)::information_schema.sql_identifier AS scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS maximum_cardinality,\n    (\n        CASE\n            WHEN (p.prokind <> 'p'::\"char\") THEN 0\n            ELSE NULL::integer\n        END)::information_schema.sql_identifier AS dtd_identifier,\n    (\n        CASE\n            WHEN (l.lanname = 'sql'::name) THEN 'SQL'::text\n            ELSE 'EXTERNAL'::text\n        END)::information_schema.character_data AS routine_body,\n    (\n        CASE\n            WHEN pg_has_role(p.proowner, 'USAGE'::text) THEN p.prosrc\n            ELSE NULL::text\n        END)::information_schema.character_data AS routine_definition,\n    (\n        CASE\n            WHEN (l.lanname = 'c'::name) THEN p.prosrc\n            ELSE NULL::text\n        END)::information_schema.character_data AS external_name,\n    (upper((l.lanname)::text))::information_schema.character_data AS external_language,\n    ('GENERAL'::character varying)::information_schema.character_data AS parameter_style,\n    (\n        CASE\n            WHEN (p.provolatile = 'i'::\"char\") THEN 'YES'::text\n            ELSE 'NO'::text\n        END)::information_schema.yes_or_no AS is_deterministic,\n    ('MODIFIES'::character varying)::information_schema.character_data AS sql_data_access,\n    (\n        CASE\n            WHEN (p.prokind <> 'p'::\"char\") THEN\n            CASE\n                WHEN p.proisstrict THEN 'YES'::text\n                ELSE 'NO'::text\n            END\n            ELSE NULL::text\n        END)::information_schema.yes_or_no AS is_null_call,\n    (NULL::character varying)::information_schema.character_data AS sql_path,\n    ('YES'::character varying)::information_schema.yes_or_no AS schema_level_routine,\n    (0)::information_schema.cardinal_number AS max_dynamic_result_sets,\n    (NULL::character varying)::information_schema.yes_or_no AS is_user_defined_cast,\n    (NULL::character varying)::information_schema.yes_or_no AS is_implicitly_invocable,\n    (\n        CASE\n            WHEN p.prosecdef THEN 'DEFINER'::text\n            ELSE 'INVOKER'::text\n        END)::information_schema.character_data AS security_type,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_catalog,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_schema,\n    (NULL::name)::information_schema.sql_identifier AS to_sql_specific_name,\n    ('NO'::character varying)::information_schema.yes_or_no AS as_locator,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS created,\n    (NULL::timestamp with time zone)::information_schema.time_stamp AS last_altered,\n    (NULL::character varying)::information_schema.yes_or_no AS new_savepoint_level,\n    ('NO'::character varying)::information_schema.yes_or_no AS is_udt_dependent,\n    (NULL::character varying)::information_schema.character_data AS result_cast_from_data_type,\n    (NULL::character varying)::information_schema.yes_or_no AS result_cast_as_locator,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_char_max_length,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_char_octet_length,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_char_set_name,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_collation_name,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_precision_radix,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_numeric_scale,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_datetime_precision,\n    (NULL::character varying)::information_schema.character_data AS result_cast_interval_type,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_interval_precision,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_type_udt_name,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_catalog,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_schema,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_scope_name,\n    (NULL::integer)::information_schema.cardinal_number AS result_cast_maximum_cardinality,\n    (NULL::name)::information_schema.sql_identifier AS result_cast_dtd_identifier\n   FROM (((pg_namespace n\n     JOIN pg_proc p ON ((n.oid = p.pronamespace)))\n     JOIN pg_language l ON ((p.prolang = l.oid)))\n     LEFT JOIN (pg_type t\n     JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON (((p.prorettype = t.oid) AND (p.prokind <> 'p'::\"char\"))))\n  WHERE (pg_has_role(p.proowner, 'USAGE'::text) OR has_function_privilege(p.oid, 'EXECUTE'::text));")
) {
    companion object {

        /**
         * The reference instance of <code>information_schema.routines</code>
         */
        val ROUTINES: Routines = Routines()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>information_schema.routines.specific_catalog</code>.
     */
    val SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("specific_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.specific_schema</code>.
     */
    val SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("specific_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.specific_name</code>.
     */
    val SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("specific_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_catalog</code>.
     */
    val ROUTINE_CATALOG: TableField<Record, String?> = createField(DSL.name("routine_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_schema</code>.
     */
    val ROUTINE_SCHEMA: TableField<Record, String?> = createField(DSL.name("routine_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_name</code>.
     */
    val ROUTINE_NAME: TableField<Record, String?> = createField(DSL.name("routine_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_type</code>.
     */
    val ROUTINE_TYPE: TableField<Record, String?> = createField(DSL.name("routine_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_catalog</code>.
     */
    val MODULE_CATALOG: TableField<Record, String?> = createField(DSL.name("module_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_schema</code>.
     */
    val MODULE_SCHEMA: TableField<Record, String?> = createField(DSL.name("module_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.module_name</code>.
     */
    val MODULE_NAME: TableField<Record, String?> = createField(DSL.name("module_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_catalog</code>.
     */
    val UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("udt_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_schema</code>.
     */
    val UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("udt_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.udt_name</code>.
     */
    val UDT_NAME: TableField<Record, String?> = createField(DSL.name("udt_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.data_type</code>.
     */
    val DATA_TYPE: TableField<Record, String?> = createField(DSL.name("data_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_maximum_length</code>.
     */
    val CHARACTER_MAXIMUM_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_maximum_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_octet_length</code>.
     */
    val CHARACTER_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("character_octet_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.character_set_catalog</code>.
     */
    val CHARACTER_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("character_set_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.character_set_schema</code>.
     */
    val CHARACTER_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("character_set_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.character_set_name</code>.
     */
    val CHARACTER_SET_NAME: TableField<Record, String?> = createField(DSL.name("character_set_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_catalog</code>.
     */
    val COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("collation_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_schema</code>.
     */
    val COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("collation_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.collation_name</code>.
     */
    val COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("collation_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.numeric_precision</code>.
     */
    val NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("numeric_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.numeric_precision_radix</code>.
     */
    val NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("numeric_precision_radix"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.numeric_scale</code>.
     */
    val NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("numeric_scale"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.datetime_precision</code>.
     */
    val DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("datetime_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.interval_type</code>.
     */
    val INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("interval_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.interval_precision</code>.
     */
    val INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("interval_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_catalog</code>.
     */
    val TYPE_UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("type_udt_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_schema</code>.
     */
    val TYPE_UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("type_udt_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.type_udt_name</code>.
     */
    val TYPE_UDT_NAME: TableField<Record, String?> = createField(DSL.name("type_udt_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_catalog</code>.
     */
    val SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("scope_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_schema</code>.
     */
    val SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("scope_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.scope_name</code>.
     */
    val SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("scope_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.maximum_cardinality</code>.
     */
    val MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("maximum_cardinality"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.dtd_identifier</code>.
     */
    val DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("dtd_identifier"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_body</code>.
     */
    val ROUTINE_BODY: TableField<Record, String?> = createField(DSL.name("routine_body"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.routine_definition</code>.
     */
    val ROUTINE_DEFINITION: TableField<Record, String?> = createField(DSL.name("routine_definition"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.external_name</code>.
     */
    val EXTERNAL_NAME: TableField<Record, String?> = createField(DSL.name("external_name"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.external_language</code>.
     */
    val EXTERNAL_LANGUAGE: TableField<Record, String?> = createField(DSL.name("external_language"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.parameter_style</code>.
     */
    val PARAMETER_STYLE: TableField<Record, String?> = createField(DSL.name("parameter_style"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_deterministic</code>.
     */
    val IS_DETERMINISTIC: TableField<Record, String?> = createField(DSL.name("is_deterministic"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.sql_data_access</code>.
     */
    val SQL_DATA_ACCESS: TableField<Record, String?> = createField(DSL.name("sql_data_access"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_null_call</code>.
     */
    val IS_NULL_CALL: TableField<Record, String?> = createField(DSL.name("is_null_call"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.sql_path</code>.
     */
    val SQL_PATH: TableField<Record, String?> = createField(DSL.name("sql_path"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.schema_level_routine</code>.
     */
    val SCHEMA_LEVEL_ROUTINE: TableField<Record, String?> = createField(DSL.name("schema_level_routine"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.max_dynamic_result_sets</code>.
     */
    val MAX_DYNAMIC_RESULT_SETS: TableField<Record, Int?> = createField(DSL.name("max_dynamic_result_sets"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_user_defined_cast</code>.
     */
    val IS_USER_DEFINED_CAST: TableField<Record, String?> = createField(DSL.name("is_user_defined_cast"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.is_implicitly_invocable</code>.
     */
    val IS_IMPLICITLY_INVOCABLE: TableField<Record, String?> = createField(DSL.name("is_implicitly_invocable"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.security_type</code>.
     */
    val SECURITY_TYPE: TableField<Record, String?> = createField(DSL.name("security_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.to_sql_specific_catalog</code>.
     */
    val TO_SQL_SPECIFIC_CATALOG: TableField<Record, String?> = createField(DSL.name("to_sql_specific_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.to_sql_specific_schema</code>.
     */
    val TO_SQL_SPECIFIC_SCHEMA: TableField<Record, String?> = createField(DSL.name("to_sql_specific_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.to_sql_specific_name</code>.
     */
    val TO_SQL_SPECIFIC_NAME: TableField<Record, String?> = createField(DSL.name("to_sql_specific_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.as_locator</code>.
     */
    val AS_LOCATOR: TableField<Record, String?> = createField(DSL.name("as_locator"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.created</code>.
     */
    val CREATED: TableField<Record, OffsetDateTime?> = createField(DSL.name("created"), com.sample.information_schema.domains.TIME_STAMP.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.last_altered</code>.
     */
    val LAST_ALTERED: TableField<Record, OffsetDateTime?> = createField(DSL.name("last_altered"), com.sample.information_schema.domains.TIME_STAMP.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.new_savepoint_level</code>.
     */
    val NEW_SAVEPOINT_LEVEL: TableField<Record, String?> = createField(DSL.name("new_savepoint_level"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column <code>information_schema.routines.is_udt_dependent</code>.
     */
    val IS_UDT_DEPENDENT: TableField<Record, String?> = createField(DSL.name("is_udt_dependent"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_from_data_type</code>.
     */
    val RESULT_CAST_FROM_DATA_TYPE: TableField<Record, String?> = createField(DSL.name("result_cast_from_data_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_as_locator</code>.
     */
    val RESULT_CAST_AS_LOCATOR: TableField<Record, String?> = createField(DSL.name("result_cast_as_locator"), com.sample.information_schema.domains.YES_OR_NO.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_max_length</code>.
     */
    val RESULT_CAST_CHAR_MAX_LENGTH: TableField<Record, Int?> = createField(DSL.name("result_cast_char_max_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_octet_length</code>.
     */
    val RESULT_CAST_CHAR_OCTET_LENGTH: TableField<Record, Int?> = createField(DSL.name("result_cast_char_octet_length"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_catalog</code>.
     */
    val RESULT_CAST_CHAR_SET_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_schema</code>.
     */
    val RESULT_CAST_CHAR_SET_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_char_set_name</code>.
     */
    val RESULT_CAST_CHAR_SET_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_char_set_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_catalog</code>.
     */
    val RESULT_CAST_COLLATION_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_collation_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_schema</code>.
     */
    val RESULT_CAST_COLLATION_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_collation_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_collation_name</code>.
     */
    val RESULT_CAST_COLLATION_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_collation_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_precision</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_precision_radix</code>.
     */
    val RESULT_CAST_NUMERIC_PRECISION_RADIX: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_precision_radix"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_numeric_scale</code>.
     */
    val RESULT_CAST_NUMERIC_SCALE: TableField<Record, Int?> = createField(DSL.name("result_cast_numeric_scale"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_datetime_precision</code>.
     */
    val RESULT_CAST_DATETIME_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_datetime_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_interval_type</code>.
     */
    val RESULT_CAST_INTERVAL_TYPE: TableField<Record, String?> = createField(DSL.name("result_cast_interval_type"), com.sample.information_schema.domains.CHARACTER_DATA.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_interval_precision</code>.
     */
    val RESULT_CAST_INTERVAL_PRECISION: TableField<Record, Int?> = createField(DSL.name("result_cast_interval_precision"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_catalog</code>.
     */
    val RESULT_CAST_TYPE_UDT_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_schema</code>.
     */
    val RESULT_CAST_TYPE_UDT_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_type_udt_name</code>.
     */
    val RESULT_CAST_TYPE_UDT_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_type_udt_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_catalog</code>.
     */
    val RESULT_CAST_SCOPE_CATALOG: TableField<Record, String?> = createField(DSL.name("result_cast_scope_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_schema</code>.
     */
    val RESULT_CAST_SCOPE_SCHEMA: TableField<Record, String?> = createField(DSL.name("result_cast_scope_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_scope_name</code>.
     */
    val RESULT_CAST_SCOPE_NAME: TableField<Record, String?> = createField(DSL.name("result_cast_scope_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_maximum_cardinality</code>.
     */
    val RESULT_CAST_MAXIMUM_CARDINALITY: TableField<Record, Int?> = createField(DSL.name("result_cast_maximum_cardinality"), com.sample.information_schema.domains.CARDINAL_NUMBER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.routines.result_cast_dtd_identifier</code>.
     */
    val RESULT_CAST_DTD_IDENTIFIER: TableField<Record, String?> = createField(DSL.name("result_cast_dtd_identifier"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.routines</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.routines</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.routines</code> table reference
     */
    constructor(): this(DSL.name("routines"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, ROUTINES, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): Routines = Routines(DSL.name(alias), this)
    override fun `as`(alias: Name): Routines = Routines(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Routines = Routines(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Routines = Routines(name, null)
}
