/*
 * This file is generated by jOOQ.
 */
package com.sample.information_schema.tables


import com.sample.information_schema.InformationSchema

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ConstraintColumnUsage(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    InformationSchema.INFORMATION_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"constraint_column_usage\" as  SELECT (current_database())::information_schema.sql_identifier AS table_catalog,\n    (x.tblschema)::information_schema.sql_identifier AS table_schema,\n    (x.tblname)::information_schema.sql_identifier AS table_name,\n    (x.colname)::information_schema.sql_identifier AS column_name,\n    (current_database())::information_schema.sql_identifier AS constraint_catalog,\n    (x.cstrschema)::information_schema.sql_identifier AS constraint_schema,\n    (x.cstrname)::information_schema.sql_identifier AS constraint_name\n   FROM ( SELECT DISTINCT nr.nspname,\n            r.relname,\n            r.relowner,\n            a.attname,\n            nc.nspname,\n            c.conname\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_attribute a,\n            pg_depend d,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (d.refclassid = ('pg_class'::regclass)::oid) AND (d.refobjid = r.oid) AND (d.refobjsubid = a.attnum) AND (d.classid = ('pg_constraint'::regclass)::oid) AND (d.objid = c.oid) AND (c.connamespace = nc.oid) AND (c.contype = 'c'::\"char\") AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])) AND (NOT a.attisdropped))\n        UNION ALL\n         SELECT nr.nspname,\n            r.relname,\n            r.relowner,\n            a.attname,\n            nc.nspname,\n            c.conname\n           FROM pg_namespace nr,\n            pg_class r,\n            pg_attribute a,\n            pg_namespace nc,\n            pg_constraint c\n          WHERE ((nr.oid = r.relnamespace) AND (r.oid = a.attrelid) AND (nc.oid = c.connamespace) AND (r.oid =\n                CASE c.contype\n                    WHEN 'f'::\"char\" THEN c.confrelid\n                    ELSE c.conrelid\n                END) AND (a.attnum = ANY (\n                CASE c.contype\n                    WHEN 'f'::\"char\" THEN c.confkey\n                    ELSE c.conkey\n                END)) AND (NOT a.attisdropped) AND (c.contype = ANY (ARRAY['p'::\"char\", 'u'::\"char\", 'f'::\"char\"])) AND (r.relkind = ANY (ARRAY['r'::\"char\", 'p'::\"char\"])))) x(tblschema, tblname, tblowner, colname, cstrschema, cstrname)\n  WHERE pg_has_role(x.tblowner, 'USAGE'::text);")
) {
    companion object {

        /**
         * The reference instance of
         * <code>information_schema.constraint_column_usage</code>
         */
        val CONSTRAINT_COLUMN_USAGE: ConstraintColumnUsage = ConstraintColumnUsage()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>information_schema.constraint_column_usage.table_catalog</code>.
     */
    val TABLE_CATALOG: TableField<Record, String?> = createField(DSL.name("table_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.table_schema</code>.
     */
    val TABLE_SCHEMA: TableField<Record, String?> = createField(DSL.name("table_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.table_name</code>.
     */
    val TABLE_NAME: TableField<Record, String?> = createField(DSL.name("table_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.column_name</code>.
     */
    val COLUMN_NAME: TableField<Record, String?> = createField(DSL.name("column_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.constraint_catalog</code>.
     */
    val CONSTRAINT_CATALOG: TableField<Record, String?> = createField(DSL.name("constraint_catalog"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.constraint_schema</code>.
     */
    val CONSTRAINT_SCHEMA: TableField<Record, String?> = createField(DSL.name("constraint_schema"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    /**
     * The column
     * <code>information_schema.constraint_column_usage.constraint_name</code>.
     */
    val CONSTRAINT_NAME: TableField<Record, String?> = createField(DSL.name("constraint_name"), com.sample.information_schema.domains.SQL_IDENTIFIER.getDataType(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>information_schema.constraint_column_usage</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>information_schema.constraint_column_usage</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>information_schema.constraint_column_usage</code> table
     * reference
     */
    constructor(): this(DSL.name("constraint_column_usage"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, CONSTRAINT_COLUMN_USAGE, null)
    override fun getSchema(): Schema? = if (aliased()) null else InformationSchema.INFORMATION_SCHEMA
    override fun `as`(alias: String): ConstraintColumnUsage = ConstraintColumnUsage(DSL.name(alias), this)
    override fun `as`(alias: Name): ConstraintColumnUsage = ConstraintColumnUsage(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ConstraintColumnUsage = ConstraintColumnUsage(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ConstraintColumnUsage = ConstraintColumnUsage(name, null)
}
