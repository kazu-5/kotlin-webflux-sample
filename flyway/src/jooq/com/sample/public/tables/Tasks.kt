/*
 * This file is generated by jOOQ.
 */
package com.sample.`public`.tables


import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Tasks(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?
): TableImpl<Record>(
    alias,
    com.sample.`public`.Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.tasks</code>
         */
        val TASKS: Tasks = Tasks()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>public.tasks.task_id</code>.
     */
    val TASK_ID: TableField<Record, UUID?> = createField(DSL.name("task_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.tasks.name</code>.
     */
    val NAME: TableField<Record, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>public.tasks.created_at</code>.
     */
    val CREATED_AT: TableField<Record, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.tasks.updated_at</code>.
     */
    val UPDATED_AT: TableField<Record, OffsetDateTime?> = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tasks</code> table reference
     */
    constructor(): this(DSL.name("tasks"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, Record>): this(Internal.createPathAlias(child, key), child, key, TASKS, null)
    override fun getSchema(): Schema? = if (aliased()) null else com.sample.`public`.Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<Record> = com.sample.`public`.keys.TASKS_PKEY
    override fun `as`(alias: String): Tasks = Tasks(DSL.name(alias), this)
    override fun `as`(alias: Name): Tasks = Tasks(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tasks = Tasks(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tasks = Tasks(name, null)
}
