/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Indexes;
import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgStatisticExtData extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_statistic_ext_data</code>
     */
    public static final PgStatisticExtData PG_STATISTIC_EXT_DATA = new PgStatisticExtData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_statistic_ext_data.stxoid</code>.
     */
    public final TableField<Record, Long> STXOID = createField(DSL.name("stxoid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> STXDNDISTINCT = createField(DSL.name("stxdndistinct"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_ndistinct\""), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> STXDDEPENDENCIES = createField(DSL.name("stxddependencies"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_dependencies\""), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> STXDMCV = createField(DSL.name("stxdmcv"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_mcv_list\""), this, "");

    private PgStatisticExtData(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgStatisticExtData(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statistic_ext_data</code> table
     * reference
     */
    public PgStatisticExtData(String alias) {
        this(DSL.name(alias), PG_STATISTIC_EXT_DATA);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_statistic_ext_data</code> table
     * reference
     */
    public PgStatisticExtData(Name alias) {
        this(alias, PG_STATISTIC_EXT_DATA);
    }

    /**
     * Create a <code>pg_catalog.pg_statistic_ext_data</code> table reference
     */
    public PgStatisticExtData() {
        this(DSL.name("pg_statistic_ext_data"), null);
    }

    public <O extends Record> PgStatisticExtData(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_STATISTIC_EXT_DATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_STATISTIC_EXT_DATA_STXOID_INDEX);
    }

    @Override
    public PgStatisticExtData as(String alias) {
        return new PgStatisticExtData(DSL.name(alias), this);
    }

    @Override
    public PgStatisticExtData as(Name alias) {
        return new PgStatisticExtData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatisticExtData rename(String name) {
        return new PgStatisticExtData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgStatisticExtData rename(Name name) {
        return new PgStatisticExtData(name, null);
    }
}
