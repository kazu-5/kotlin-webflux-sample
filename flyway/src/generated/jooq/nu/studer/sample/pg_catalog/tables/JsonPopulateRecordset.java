/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JsonPopulateRecordset extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.json_populate_recordset</code>
     */
    public static final JsonPopulateRecordset JSON_POPULATE_RECORDSET = new JsonPopulateRecordset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> JSON_POPULATE_RECORDSET_ = createField(DSL.name("json_populate_recordset"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"anyelement\""), this, "");

    private JsonPopulateRecordset(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
            DSL.val(null, SQLDataType.VARCHAR),
            DSL.val(null, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        });
    }

    private JsonPopulateRecordset(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.json_populate_recordset</code> table
     * reference
     */
    public JsonPopulateRecordset(String alias) {
        this(DSL.name(alias), JSON_POPULATE_RECORDSET);
    }

    /**
     * Create an aliased <code>pg_catalog.json_populate_recordset</code> table
     * reference
     */
    public JsonPopulateRecordset(Name alias) {
        this(alias, JSON_POPULATE_RECORDSET);
    }

    /**
     * Create a <code>pg_catalog.json_populate_recordset</code> table reference
     */
    public JsonPopulateRecordset() {
        this(DSL.name("json_populate_recordset"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public JsonPopulateRecordset as(String alias) {
        return new JsonPopulateRecordset(DSL.name(alias), this, parameters);
    }

    @Override
    public JsonPopulateRecordset as(Name alias) {
        return new JsonPopulateRecordset(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonPopulateRecordset rename(String name) {
        return new JsonPopulateRecordset(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public JsonPopulateRecordset rename(Name name) {
        return new JsonPopulateRecordset(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public JsonPopulateRecordset call(
          Object base
        , String fromJson
        , Boolean useJsonAsText
    ) {
        JsonPopulateRecordset result = new JsonPopulateRecordset(DSL.name("json_populate_recordset"), null, new Field[] {
            DSL.val(base, org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"anyelement\"")),
            DSL.val(fromJson, SQLDataType.VARCHAR),
            DSL.val(useJsonAsText, SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)))
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public JsonPopulateRecordset call(
          Field<Object> base
        , Field<String> fromJson
        , Field<Boolean> useJsonAsText
    ) {
        JsonPopulateRecordset result = new JsonPopulateRecordset(DSL.name("json_populate_recordset"), null, new Field[] {
            base,
            fromJson,
            useJsonAsText
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
