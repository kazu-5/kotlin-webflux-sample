/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Indexes;
import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTrigger extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_trigger</code>
     */
    public static final PgTrigger PG_TRIGGER = new PgTrigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_trigger.oid</code>.
     */
    public final TableField<Record, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgrelid</code>.
     */
    public final TableField<Record, Long> TGRELID = createField(DSL.name("tgrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgparentid</code>.
     */
    public final TableField<Record, Long> TGPARENTID = createField(DSL.name("tgparentid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgname</code>.
     */
    public final TableField<Record, String> TGNAME = createField(DSL.name("tgname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgfoid</code>.
     */
    public final TableField<Record, Long> TGFOID = createField(DSL.name("tgfoid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgtype</code>.
     */
    public final TableField<Record, Short> TGTYPE = createField(DSL.name("tgtype"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgenabled</code>.
     */
    public final TableField<Record, String> TGENABLED = createField(DSL.name("tgenabled"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgisinternal</code>.
     */
    public final TableField<Record, Boolean> TGISINTERNAL = createField(DSL.name("tgisinternal"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstrrelid</code>.
     */
    public final TableField<Record, Long> TGCONSTRRELID = createField(DSL.name("tgconstrrelid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstrindid</code>.
     */
    public final TableField<Record, Long> TGCONSTRINDID = createField(DSL.name("tgconstrindid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgconstraint</code>.
     */
    public final TableField<Record, Long> TGCONSTRAINT = createField(DSL.name("tgconstraint"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgdeferrable</code>.
     */
    public final TableField<Record, Boolean> TGDEFERRABLE = createField(DSL.name("tgdeferrable"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tginitdeferred</code>.
     */
    public final TableField<Record, Boolean> TGINITDEFERRED = createField(DSL.name("tginitdeferred"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgnargs</code>.
     */
    public final TableField<Record, Short> TGNARGS = createField(DSL.name("tgnargs"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgattr</code>.
     */
    public final TableField<Record, Object[]> TGATTR = createField(DSL.name("tgattr"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"int2vector\"").getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgargs</code>.
     */
    public final TableField<Record, byte[]> TGARGS = createField(DSL.name("tgargs"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> TGQUAL = createField(DSL.name("tgqual"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\""), this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgoldtable</code>.
     */
    public final TableField<Record, String> TGOLDTABLE = createField(DSL.name("tgoldtable"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>pg_catalog.pg_trigger.tgnewtable</code>.
     */
    public final TableField<Record, String> TGNEWTABLE = createField(DSL.name("tgnewtable"), SQLDataType.VARCHAR, this, "");

    private PgTrigger(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgTrigger(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger(String alias) {
        this(DSL.name(alias), PG_TRIGGER);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger(Name alias) {
        this(alias, PG_TRIGGER);
    }

    /**
     * Create a <code>pg_catalog.pg_trigger</code> table reference
     */
    public PgTrigger() {
        this(DSL.name("pg_trigger"), null);
    }

    public <O extends Record> PgTrigger(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_TRIGGER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_TRIGGER_OID_INDEX, Indexes.PG_TRIGGER_TGCONSTRAINT_INDEX, Indexes.PG_TRIGGER_TGRELID_TGNAME_INDEX);
    }

    @Override
    public PgTrigger as(String alias) {
        return new PgTrigger(DSL.name(alias), this);
    }

    @Override
    public PgTrigger as(Name alias) {
        return new PgTrigger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTrigger rename(String name) {
        return new PgTrigger(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTrigger rename(Name name) {
        return new PgTrigger(name, null);
    }
}
