/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Indexes;
import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgRewrite extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_rewrite</code>
     */
    public static final PgRewrite PG_REWRITE = new PgRewrite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_rewrite.oid</code>.
     */
    public final TableField<Record, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_rewrite.rulename</code>.
     */
    public final TableField<Record, String> RULENAME = createField(DSL.name("rulename"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_rewrite.ev_class</code>.
     */
    public final TableField<Record, Long> EV_CLASS = createField(DSL.name("ev_class"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_rewrite.ev_type</code>.
     */
    public final TableField<Record, String> EV_TYPE = createField(DSL.name("ev_type"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_rewrite.ev_enabled</code>.
     */
    public final TableField<Record, String> EV_ENABLED = createField(DSL.name("ev_enabled"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_rewrite.is_instead</code>.
     */
    public final TableField<Record, Boolean> IS_INSTEAD = createField(DSL.name("is_instead"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> EV_QUAL = createField(DSL.name("ev_qual"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\"").nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> EV_ACTION = createField(DSL.name("ev_action"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_node_tree\"").nullable(false), this, "");

    private PgRewrite(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgRewrite(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_rewrite</code> table reference
     */
    public PgRewrite(String alias) {
        this(DSL.name(alias), PG_REWRITE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_rewrite</code> table reference
     */
    public PgRewrite(Name alias) {
        this(alias, PG_REWRITE);
    }

    /**
     * Create a <code>pg_catalog.pg_rewrite</code> table reference
     */
    public PgRewrite() {
        this(DSL.name("pg_rewrite"), null);
    }

    public <O extends Record> PgRewrite(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_REWRITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_REWRITE_OID_INDEX, Indexes.PG_REWRITE_REL_RULENAME_INDEX);
    }

    @Override
    public PgRewrite as(String alias) {
        return new PgRewrite(DSL.name(alias), this);
    }

    @Override
    public PgRewrite as(Name alias) {
        return new PgRewrite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgRewrite rename(String name) {
        return new PgRewrite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgRewrite rename(Name name) {
        return new PgRewrite(name, null);
    }
}
