/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GenerateSeries extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.generate_series</code>
     */
    public static final GenerateSeries GENERATE_SERIES = new GenerateSeries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.generate_series.generate_series</code>.
     */
    public final TableField<Record, Integer> GENERATE_SERIES_ = createField(DSL.name("generate_series"), SQLDataType.INTEGER, this, "");

    private GenerateSeries(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[] {
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.INTEGER),
            DSL.val(null, SQLDataType.INTEGER)
        });
    }

    private GenerateSeries(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    /**
     * Create an aliased <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries(String alias) {
        this(DSL.name(alias), GENERATE_SERIES);
    }

    /**
     * Create an aliased <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries(Name alias) {
        this(alias, GENERATE_SERIES);
    }

    /**
     * Create a <code>pg_catalog.generate_series</code> table reference
     */
    public GenerateSeries() {
        this(DSL.name("generate_series"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public GenerateSeries as(String alias) {
        return new GenerateSeries(DSL.name(alias), this, parameters);
    }

    @Override
    public GenerateSeries as(Name alias) {
        return new GenerateSeries(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateSeries rename(String name) {
        return new GenerateSeries(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GenerateSeries rename(Name name) {
        return new GenerateSeries(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public GenerateSeries call(
          Integer __1
        , Integer __2
        , Integer __3
    ) {
        GenerateSeries result = new GenerateSeries(DSL.name("generate_series"), null, new Field[] {
            DSL.val(__1, SQLDataType.INTEGER),
            DSL.val(__2, SQLDataType.INTEGER),
            DSL.val(__3, SQLDataType.INTEGER)
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }

    /**
     * Call this table-valued function
     */
    public GenerateSeries call(
          Field<Integer> __1
        , Field<Integer> __2
        , Field<Integer> __3
    ) {
        GenerateSeries result = new GenerateSeries(DSL.name("generate_series"), null, new Field[] {
            __1,
            __2,
            __3
        });

        return aliased() ? result.as(getUnqualifiedName()) : result;
    }
}
