/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Indexes;
import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTsTemplate extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_ts_template</code>
     */
    public static final PgTsTemplate PG_TS_TEMPLATE = new PgTsTemplate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_ts_template.oid</code>.
     */
    public final TableField<Record, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplname</code>.
     */
    public final TableField<Record, String> TMPLNAME = createField(DSL.name("tmplname"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplnamespace</code>.
     */
    public final TableField<Record, Long> TMPLNAMESPACE = createField(DSL.name("tmplnamespace"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmplinit</code>.
     */
    public final TableField<Record, String> TMPLINIT = createField(DSL.name("tmplinit"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_ts_template.tmpllexize</code>.
     */
    public final TableField<Record, String> TMPLLEXIZE = createField(DSL.name("tmpllexize"), SQLDataType.VARCHAR.nullable(false), this, "");

    private PgTsTemplate(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgTsTemplate(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate(String alias) {
        this(DSL.name(alias), PG_TS_TEMPLATE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate(Name alias) {
        this(alias, PG_TS_TEMPLATE);
    }

    /**
     * Create a <code>pg_catalog.pg_ts_template</code> table reference
     */
    public PgTsTemplate() {
        this(DSL.name("pg_ts_template"), null);
    }

    public <O extends Record> PgTsTemplate(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_TS_TEMPLATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_TS_TEMPLATE_OID_INDEX, Indexes.PG_TS_TEMPLATE_TMPLNAME_INDEX);
    }

    @Override
    public PgTsTemplate as(String alias) {
        return new PgTsTemplate(DSL.name(alias), this);
    }

    @Override
    public PgTsTemplate as(Name alias) {
        return new PgTsTemplate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsTemplate rename(String name) {
        return new PgTsTemplate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgTsTemplate rename(Name name) {
        return new PgTsTemplate(name, null);
    }
}
