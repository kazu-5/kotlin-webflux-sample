/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.time.OffsetDateTime;

import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgPreparedStatements extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_prepared_statements</code>
     */
    public static final PgPreparedStatements PG_PREPARED_STATEMENTS = new PgPreparedStatements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_prepared_statements.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_statements.statement</code>.
     */
    public final TableField<Record, String> STATEMENT = createField(DSL.name("statement"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_statements.prepare_time</code>.
     */
    public final TableField<Record, OffsetDateTime> PREPARE_TIME = createField(DSL.name("prepare_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column
     * <code>pg_catalog.pg_prepared_statements.parameter_types</code>.
     */
    public final TableField<Record, Object[]> PARAMETER_TYPES = createField(DSL.name("parameter_types"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"regtype\"").getArrayDataType(), this, "");

    /**
     * The column <code>pg_catalog.pg_prepared_statements.from_sql</code>.
     */
    public final TableField<Record, Boolean> FROM_SQL = createField(DSL.name("from_sql"), SQLDataType.BOOLEAN, this, "");

    private PgPreparedStatements(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgPreparedStatements(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_prepared_statements\" as  SELECT p.name,\n    p.statement,\n    p.prepare_time,\n    p.parameter_types,\n    p.from_sql\n   FROM pg_prepared_statement() p(name, statement, prepare_time, parameter_types, from_sql);"));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_statements</code> table
     * reference
     */
    public PgPreparedStatements(String alias) {
        this(DSL.name(alias), PG_PREPARED_STATEMENTS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_prepared_statements</code> table
     * reference
     */
    public PgPreparedStatements(Name alias) {
        this(alias, PG_PREPARED_STATEMENTS);
    }

    /**
     * Create a <code>pg_catalog.pg_prepared_statements</code> table reference
     */
    public PgPreparedStatements() {
        this(DSL.name("pg_prepared_statements"), null);
    }

    public <O extends Record> PgPreparedStatements(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_PREPARED_STATEMENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgPreparedStatements as(String alias) {
        return new PgPreparedStatements(DSL.name(alias), this);
    }

    @Override
    public PgPreparedStatements as(Name alias) {
        return new PgPreparedStatements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgPreparedStatements rename(String name) {
        return new PgPreparedStatements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgPreparedStatements rename(Name name) {
        return new PgPreparedStatements(name, null);
    }
}
