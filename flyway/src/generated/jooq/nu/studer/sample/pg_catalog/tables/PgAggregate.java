/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import java.util.Arrays;
import java.util.List;

import nu.studer.sample.pg_catalog.Indexes;
import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgAggregate extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pg_catalog.pg_aggregate</code>
     */
    public static final PgAggregate PG_AGGREGATE = new PgAggregate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_aggregate.aggfnoid</code>.
     */
    public final TableField<Record, String> AGGFNOID = createField(DSL.name("aggfnoid"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggkind</code>.
     */
    public final TableField<Record, String> AGGKIND = createField(DSL.name("aggkind"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggnumdirectargs</code>.
     */
    public final TableField<Record, Short> AGGNUMDIRECTARGS = createField(DSL.name("aggnumdirectargs"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggtransfn</code>.
     */
    public final TableField<Record, String> AGGTRANSFN = createField(DSL.name("aggtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggfinalfn</code>.
     */
    public final TableField<Record, String> AGGFINALFN = createField(DSL.name("aggfinalfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggcombinefn</code>.
     */
    public final TableField<Record, String> AGGCOMBINEFN = createField(DSL.name("aggcombinefn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggserialfn</code>.
     */
    public final TableField<Record, String> AGGSERIALFN = createField(DSL.name("aggserialfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggdeserialfn</code>.
     */
    public final TableField<Record, String> AGGDESERIALFN = createField(DSL.name("aggdeserialfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmtransfn</code>.
     */
    public final TableField<Record, String> AGGMTRANSFN = createField(DSL.name("aggmtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggminvtransfn</code>.
     */
    public final TableField<Record, String> AGGMINVTRANSFN = createField(DSL.name("aggminvtransfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmfinalfn</code>.
     */
    public final TableField<Record, String> AGGMFINALFN = createField(DSL.name("aggmfinalfn"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggfinalextra</code>.
     */
    public final TableField<Record, Boolean> AGGFINALEXTRA = createField(DSL.name("aggfinalextra"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmfinalextra</code>.
     */
    public final TableField<Record, Boolean> AGGMFINALEXTRA = createField(DSL.name("aggmfinalextra"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggfinalmodify</code>.
     */
    public final TableField<Record, String> AGGFINALMODIFY = createField(DSL.name("aggfinalmodify"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmfinalmodify</code>.
     */
    public final TableField<Record, String> AGGMFINALMODIFY = createField(DSL.name("aggmfinalmodify"), SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggsortop</code>.
     */
    public final TableField<Record, Long> AGGSORTOP = createField(DSL.name("aggsortop"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggtranstype</code>.
     */
    public final TableField<Record, Long> AGGTRANSTYPE = createField(DSL.name("aggtranstype"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggtransspace</code>.
     */
    public final TableField<Record, Integer> AGGTRANSSPACE = createField(DSL.name("aggtransspace"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmtranstype</code>.
     */
    public final TableField<Record, Long> AGGMTRANSTYPE = createField(DSL.name("aggmtranstype"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggmtransspace</code>.
     */
    public final TableField<Record, Integer> AGGMTRANSSPACE = createField(DSL.name("aggmtransspace"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.agginitval</code>.
     */
    public final TableField<Record, String> AGGINITVAL = createField(DSL.name("agginitval"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>pg_catalog.pg_aggregate.aggminitval</code>.
     */
    public final TableField<Record, String> AGGMINITVAL = createField(DSL.name("aggminitval"), SQLDataType.CLOB, this, "");

    private PgAggregate(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgAggregate(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pg_catalog.pg_aggregate</code> table reference
     */
    public PgAggregate(String alias) {
        this(DSL.name(alias), PG_AGGREGATE);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_aggregate</code> table reference
     */
    public PgAggregate(Name alias) {
        this(alias, PG_AGGREGATE);
    }

    /**
     * Create a <code>pg_catalog.pg_aggregate</code> table reference
     */
    public PgAggregate() {
        this(DSL.name("pg_aggregate"), null);
    }

    public <O extends Record> PgAggregate(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_AGGREGATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PG_AGGREGATE_FNOID_INDEX);
    }

    @Override
    public PgAggregate as(String alias) {
        return new PgAggregate(DSL.name(alias), this);
    }

    @Override
    public PgAggregate as(Name alias) {
        return new PgAggregate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAggregate rename(String name) {
        return new PgAggregate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgAggregate rename(Name name) {
        return new PgAggregate(name, null);
    }
}
