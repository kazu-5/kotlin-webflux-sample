/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.pg_catalog.tables;


import nu.studer.sample.pg_catalog.PgCatalog;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgReplicationOriginStatus extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>pg_catalog.pg_replication_origin_status</code>
     */
    public static final PgReplicationOriginStatus PG_REPLICATION_ORIGIN_STATUS = new PgReplicationOriginStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pg_catalog.pg_replication_origin_status.local_id</code>.
     */
    public final TableField<Record, Long> LOCAL_ID = createField(DSL.name("local_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>pg_catalog.pg_replication_origin_status.external_id</code>.
     */
    public final TableField<Record, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> REMOTE_LSN = createField(DSL.name("remote_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> LOCAL_LSN = createField(DSL.name("local_lsn"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"pg_lsn\""), this, "");

    private PgReplicationOriginStatus(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private PgReplicationOriginStatus(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"pg_replication_origin_status\" as  SELECT pg_show_replication_origin_status.local_id,\n    pg_show_replication_origin_status.external_id,\n    pg_show_replication_origin_status.remote_lsn,\n    pg_show_replication_origin_status.local_lsn\n   FROM pg_show_replication_origin_status() pg_show_replication_origin_status(local_id, external_id, remote_lsn, local_lsn);"));
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin_status</code>
     * table reference
     */
    public PgReplicationOriginStatus(String alias) {
        this(DSL.name(alias), PG_REPLICATION_ORIGIN_STATUS);
    }

    /**
     * Create an aliased <code>pg_catalog.pg_replication_origin_status</code>
     * table reference
     */
    public PgReplicationOriginStatus(Name alias) {
        this(alias, PG_REPLICATION_ORIGIN_STATUS);
    }

    /**
     * Create a <code>pg_catalog.pg_replication_origin_status</code> table
     * reference
     */
    public PgReplicationOriginStatus() {
        this(DSL.name("pg_replication_origin_status"), null);
    }

    public <O extends Record> PgReplicationOriginStatus(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PG_REPLICATION_ORIGIN_STATUS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PgCatalog.PG_CATALOG;
    }

    @Override
    public PgReplicationOriginStatus as(String alias) {
        return new PgReplicationOriginStatus(DSL.name(alias), this);
    }

    @Override
    public PgReplicationOriginStatus as(Name alias) {
        return new PgReplicationOriginStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOriginStatus rename(String name) {
        return new PgReplicationOriginStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PgReplicationOriginStatus rename(Name name) {
        return new PgReplicationOriginStatus(name, null);
    }
}
