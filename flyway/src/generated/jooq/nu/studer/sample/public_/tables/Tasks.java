/*
 * This file is generated by jOOQ.
 */
package nu.studer.sample.public_.tables;


import java.time.OffsetDateTime;
import java.util.UUID;

import nu.studer.sample.public_.Keys;
import nu.studer.sample.public_.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.tasks.task_id</code>.
     */
    public final TableField<Record, UUID> TASK_ID = createField(DSL.name("task_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tasks.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.tasks.created_at</code>.
     */
    public final TableField<Record, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.tasks.updated_at</code>.
     */
    public final TableField<Record, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Tasks(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    public <O extends Record> Tasks(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TASKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.TASKS_PKEY;
    }

    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }
}
